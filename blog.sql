/*
 Navicat Premium Data Transfer

 Source Server         : 本地服务器
 Source Server Type    : MySQL
 Source Server Version : 80027
 Source Host           : localhost:3306
 Source Schema         : blog

 Target Server Type    : MySQL
 Target Server Version : 80027
 File Encoding         : 65001

 Date: 27/06/2023 18:55:34
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for critic
-- ----------------------------
DROP TABLE IF EXISTS `critic`;
CREATE TABLE `critic`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `account` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `c_date` datetime NULL DEFAULT NULL,
  `c_comment` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of critic
-- ----------------------------
INSERT INTO `critic` VALUES (1, 'fish', '2023-06-26 00:00:00', 'nihao');
INSERT INTO `critic` VALUES (2, 'admin', '2023-06-26 00:00:00', '苏哥哥好帅');

-- ----------------------------
-- Table structure for me_article
-- ----------------------------
DROP TABLE IF EXISTS `me_article`;
CREATE TABLE `me_article`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `comment_counts` int NULL DEFAULT NULL,
  `create_date` datetime NULL DEFAULT NULL,
  `summary` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `title` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `view_counts` int NULL DEFAULT NULL,
  `weight` int NOT NULL,
  `author_id` bigint NULL DEFAULT NULL,
  `body_id` bigint NULL DEFAULT NULL,
  `category_id` int NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `FKndx2m69302cso79y66yxiju4h`(`author_id` ASC) USING BTREE,
  INDEX `FKrd11pjsmueckfrh9gs7bc6374`(`body_id` ASC) USING BTREE,
  INDEX `FKjrn3ua4xmiulp8raj7m9d2xk6`(`category_id` ASC) USING BTREE,
  CONSTRAINT `FKjrn3ua4xmiulp8raj7m9d2xk6` FOREIGN KEY (`category_id`) REFERENCES `me_category` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `FKndx2m69302cso79y66yxiju4h` FOREIGN KEY (`author_id`) REFERENCES `sys_user` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `FKrd11pjsmueckfrh9gs7bc6374` FOREIGN KEY (`body_id`) REFERENCES `me_article_body` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 29 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of me_article
-- ----------------------------
INSERT INTO `me_article` VALUES (9, 0, '2023-04-13 14:37:23', 'Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。', 'Vue.js 是什么', 12, 0, 1, 42, 1);
INSERT INTO `me_article` VALUES (10, 0, '2023-05-04 14:47:19', '本节将介绍如何在项目中使用 Element。', 'Element相关', 8, 0, 1, 21, 1);
INSERT INTO `me_article` VALUES (25, 1, '2023-06-22 18:52:21', 'iFishing', '关于iFishing', 5, 0, 1, 38, 3);
INSERT INTO `me_article` VALUES (26, 0, '2023-06-23 09:08:43', '我的学习之路', 'TkMapper', 4, 0, 1, 40, 2);
INSERT INTO `me_article` VALUES (27, 0, '2023-06-23 09:12:11', 'fish', '我的鱼', 3, 0, 1, 41, 1);
INSERT INTO `me_article` VALUES (28, 3, '2023-06-25 15:39:05', 'fish\n', '你好', 19, 0, 2, 48, 3);

-- ----------------------------
-- Table structure for me_article_body
-- ----------------------------
DROP TABLE IF EXISTS `me_article_body`;
CREATE TABLE `me_article_body`  (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `content_html` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 49 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of me_article_body
-- ----------------------------
INSERT INTO `me_article_body` VALUES (1, '## 2018-01-04\n\n```\n# 使用vue的Webpack模板生成脚手架\n```\n\n## 2018-01-05\n\n```\n# 引入ElementUI\n\n# babel-plugin-component自定义主题\n# 首页\n# 登陆页\n# 注册页面\n# 日志页\n```\n## 2018-01-07\n\n```\n# 调整底部栏始终固定在底部\n# 日志页 添加时间轴\n# 首页的文章列表\n```\n## 2018-01-08\n\n```\n# 使用组件-博客作者tab页 \n# 添加第三方图标\n```\n\n## 2018-01-09\n\n```\n# 调整顶部导航栏：激活文字颜色，click点击\n# 组件-最新文章tab页\n\n# 最新文章、最热文章使用相同组件\n# 底部栏设计\n# 页面与两边边距改为100\n```\n\n## 2018-01-10\n\n```\n# 写博客 引入mavonEditor编辑器\n# 顶部导航栏都放入一个Menu中\n# 写文章页面\n#　mavonEditor局部引入\n\n#　页面的中间区域固定宽度，自动居中\n# 发布和取消\n# 发布dialog\n\n```\n## 2018-01-11\n\n```\n# 文章组件用守卫来改变body背景色\n# 调整登陆和注册页面，使其居中\n\n#子页面调整根元素为div\n#文章详情页\n\n```\n## 2018-01-12\n\n```\n# 文章详情页  内容  评论等\n\n```\n## 2018-01-13\n\n```\n## 重新调整页面结构	\n#顶部和底部 抽成  BaseHeader BaseFooter 组件\n#BlogView为单独页，以前是Home的子路由\n\n```\n## 2018-01-15\n\n``` \n# 文章分类去掉子级\n# 将首页的文章列表抽成 ArticleItem组件\n# 增加文章的评论展示\n# 增加文章分类、标签页\n\n```\n\n## 2018-01-15  2\n\n``` \n# 回到顶部去掉过渡动画（影响顶部导航栏）\n# 顶部导航栏 增加登录后菜单\n# 首页增加 最热标签\n# 增加 文章分类 标签的详情页\n# 将文章详情页、 文章分类标签页 改为Home的子路由（以前单独页）\n# Home组件增加路由判断：更正导航栏的状态、条件显示底部栏\n\n```\n\n## 2018-01-16\n\n``` \n# 将写文章的顶部Header合并到BaseHeader中\n# 图片都放到了static目录下\n\n```\n\n## 2018-01-24\n\n``` \n# 将自定义的theme放到assets下\n# 加入axios\n# 加入vuex\n# 实现登录\n# 实现退出\n\n```\n\n## 2018-01-25\n\n``` \n# 实现注册逻辑\n# 写文章功能实现\n# 写文章时支持插入图片\n\n```\n## 2018-01-26\n\n``` \n# 引入lodash工具类\n# 优化写文章的工具栏：滚动时固定顶部\n# 写文章 后台获取文章分类和标签\n\n# 首页的文章列表\n\n```\n\n## 2018-01-27\n\n``` \n# 修改首页文章列表的样式\n# 首页加载文章功能\n# 文章查看功能\n# 文章分类和标签功能列表\n\n```\n\n## 2018-01-28\n\n``` \n# 文章分类和标签详情\n\n```\n\n## 2018-01-29\n\n``` \n# 文章分类和标签的文章数\n# 首页最热文章\n# 首页最新文章\n# 首页最热标签\n\n```\n## 2018-01-30\n\n``` \n# BaseHeader放回views中\n# 修改Axios后置拦截，全局处理错误\n# 将登录 退出 和头像 放到一起\n\n```', '<h2>2018-01-04</h2>\n<pre><code class=\"lang-\"># 使用vue的Webpack模板生成脚手架\n</code></pre>\n<h2>2018-01-05</h2>\n<pre><code class=\"lang-\"># 引入ElementUI\n\n# babel-plugin-component自定义主题\n# 首页\n# 登陆页\n# 注册页面\n# 日志页\n</code></pre>\n<h2>2018-01-07</h2>\n<pre><code class=\"lang-\"># 调整底部栏始终固定在底部\n# 日志页 添加时间轴\n# 首页的文章列表\n</code></pre>\n<h2>2018-01-08</h2>\n<pre><code class=\"lang-\"># 使用组件-博客作者tab页 \n# 添加第三方图标\n</code></pre>\n<h2>2018-01-09</h2>\n<pre><code class=\"lang-\"># 调整顶部导航栏：激活文字颜色，click点击\n# 组件-最新文章tab页\n\n# 最新文章、最热文章使用相同组件\n# 底部栏设计\n# 页面与两边边距改为100\n</code></pre>\n<h2>2018-01-10</h2>\n<pre><code class=\"lang-\"># 写博客 引入mavonEditor编辑器\n# 顶部导航栏都放入一个Menu中\n# 写文章页面\n#　mavonEditor局部引入\n\n#　页面的中间区域固定宽度，自动居中\n# 发布和取消\n# 发布dialog\n\n</code></pre>\n<h2>2018-01-11</h2>\n<pre><code class=\"lang-\"># 文章组件用守卫来改变body背景色\n# 调整登陆和注册页面，使其居中\n\n#子页面调整根元素为div\n#文章详情页\n\n</code></pre>\n<h2>2018-01-12</h2>\n<pre><code class=\"lang-\"># 文章详情页  内容  评论等\n\n</code></pre>\n<h2>2018-01-13</h2>\n<pre><code class=\"lang-\">## 重新调整页面结构	\n#顶部和底部 抽成  BaseHeader BaseFooter 组件\n#BlogView为单独页，以前是Home的子路由\n\n</code></pre>\n<h2>2018-01-15</h2>\n<pre><code class=\"lang-\"># 文章分类去掉子级\n# 将首页的文章列表抽成 ArticleItem组件\n# 增加文章的评论展示\n# 增加文章分类、标签页\n\n</code></pre>\n<h2>2018-01-15  2</h2>\n<pre><code class=\"lang-\"># 回到顶部去掉过渡动画（影响顶部导航栏）\n# 顶部导航栏 增加登录后菜单\n# 首页增加 最热标签\n# 增加 文章分类 标签的详情页\n# 将文章详情页、 文章分类标签页 改为Home的子路由（以前单独页）\n# Home组件增加路由判断：更正导航栏的状态、条件显示底部栏\n\n</code></pre>\n<h2>2018-01-16</h2>\n<pre><code class=\"lang-\"># 将写文章的顶部Header合并到BaseHeader中\n# 图片都放到了static目录下\n\n</code></pre>\n<h2>2018-01-24</h2>\n<pre><code class=\"lang-\"># 将自定义的theme放到assets下\n# 加入axios\n# 加入vuex\n# 实现登录\n# 实现退出\n\n</code></pre>\n<h2>2018-01-25</h2>\n<pre><code class=\"lang-\"># 实现注册逻辑\n# 写文章功能实现\n# 写文章时支持插入图片\n\n</code></pre>\n<h2>2018-01-26</h2>\n<pre><code class=\"lang-\"># 引入lodash工具类\n# 优化写文章的工具栏：滚动时固定顶部\n# 写文章 后台获取文章分类和标签\n\n# 首页的文章列表\n\n</code></pre>\n<h2>2018-01-27</h2>\n<pre><code class=\"lang-\"># 修改首页文章列表的样式\n# 首页加载文章功能\n# 文章查看功能\n# 文章分类和标签功能列表\n\n</code></pre>\n<h2>2018-01-28</h2>\n<pre><code class=\"lang-\"># 文章分类和标签详情\n\n</code></pre>\n<h2>2018-01-29</h2>\n<pre><code class=\"lang-\"># 文章分类和标签的文章数\n# 首页最热文章\n# 首页最新文章\n# 首页最热标签\n\n</code></pre>\n<h2>2018-01-30</h2>\n<pre><code class=\"lang-\"># BaseHeader放回views中\n# 修改Axios后置拦截，全局处理错误\n# 将登录 退出 和头像 放到一起\n\n</code></pre>\n');
INSERT INTO `me_article_body` VALUES (20, 'Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。\n\n如果你想在深入学习 Vue 之前对它有更多了解，我们制作了一个视频，带您了解其核心概念和一个示例工程。\n如果你已经是有经验的前端开发者，想知道 Vue 与其它库/框架有哪些区别，请查看对比其它框架。\n\n# 起步\n\n> 官方指南假设你已了解关于 HTML、CSS 和 JavaScript 的中级知识。如果你刚开始学习前端开发，将框架作为你的第一步可能不是最好的主意——掌握好基础知识再来吧！之前有其它框架的使用经验会有帮助，但这不是必需的。\n\n尝试 Vue.js 最简单的方法是使用 JSFiddle 上的 Hello World 例子。你可以在浏览器新标签页中打开它，跟着例子学习一些基础用法。或者你也可以创建一个 .html 文件，然后通过如下方式引入 Vue：\n\n```javascript\n<script src=\"https://cdn.jsdelivr.net/npm/vue\"></script>\n\n```\n安装教程给出了更多安装 Vue 的方式。请注意我们不推荐新手直接使用 vue-cli，尤其是在你还不熟悉基于 Node.js 的构建工具时。\n\n# 声明式渲染\nVue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统：\n```javascript\n<div id=\"app\">\n  {{ message }}\n</div>\n\n```\n```javascript\nvar app = new Vue({\n  el: \'#app\',\n  data: {\n    message: \'Hello Vue!\'\n  }\n})\n\n```\n我们已经成功创建了第一个 Vue 应用！看起来这跟渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。现在数据和 DOM 已经被建立了关联，所有东西都是响应式的。我们要怎么确认呢？打开你的浏览器的 JavaScript 控制台 (就在这个页面打开)，并修改 app.message 的值，你将看到上例相应地更新。\n\n除了文本插值，我们还可以像这样来绑定元素特性：\n\n\n\n\n\n\n', '<p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>\n<p>如果你想在深入学习 Vue 之前对它有更多了解，我们制作了一个视频，带您了解其核心概念和一个示例工程。<br />\n如果你已经是有经验的前端开发者，想知道 Vue 与其它库/框架有哪些区别，请查看对比其它框架。</p>\n<h1>起步</h1>\n<blockquote>\n<p>官方指南假设你已了解关于 HTML、CSS 和 JavaScript 的中级知识。如果你刚开始学习前端开发，将框架作为你的第一步可能不是最好的主意——掌握好基础知识再来吧！之前有其它框架的使用经验会有帮助，但这不是必需的。</p>\n</blockquote>\n<p>尝试 Vue.js 最简单的方法是使用 JSFiddle 上的 Hello World 例子。你可以在浏览器新标签页中打开它，跟着例子学习一些基础用法。或者你也可以创建一个 .html 文件，然后通过如下方式引入 Vue：</p>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">&lt;script src=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/vue\"</span>&gt;<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n\n</code></div></pre>\n<p>安装教程给出了更多安装 Vue 的方式。请注意我们不推荐新手直接使用 vue-cli，尤其是在你还不熟悉基于 Node.js 的构建工具时。</p>\n<h1>声明式渲染</h1>\n<p>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统：</p>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">&lt;div id=<span class=\"hljs-string\">\"app\"</span>&gt;\n  {{ message }}\n&lt;<span class=\"hljs-regexp\">/div&gt;\n\n</span></code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-keyword\">new</span> Vue({\n  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">\'#app\'</span>,\n  <span class=\"hljs-attr\">data</span>: {\n    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\'Hello Vue!\'</span>\n  }\n})\n\n</code></div></pre>\n<p>我们已经成功创建了第一个 Vue 应用！看起来这跟渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。现在数据和 DOM 已经被建立了关联，所有东西都是响应式的。我们要怎么确认呢？打开你的浏览器的 JavaScript 控制台 (就在这个页面打开)，并修改 app.message 的值，你将看到上例相应地更新。</p>\n<p>除了文本插值，我们还可以像这样来绑定元素特性：</p>\n');
INSERT INTO `me_article_body` VALUES (21, '## 快速上手\n\n本节将介绍如何在项目中使用 Element。\n\n### 使用 Starter Kit\n我们提供了通用的项目模板，你可以直接使用。对于 Laravel 用户，我们也准备了相应的模板，同样可以直接下载使用。\n\n如果不希望使用我们提供的模板，请继续阅读。\n\n### 使用 vue-cli\n\n我们还可以使用 vue-cli 初始化项目，命令如下：\n\n```language\n> npm i -g vue-cli\n> mkdir my-project && cd my-project\n> vue init webpack\n> npm i && npm i element-ui\n```\n\n### 引入 Element\n你可以引入整个 Element，或是根据需要仅引入部分组件。我们先介绍如何引入完整的 Element。\n\n#### 完整引入\n在 main.js 中写入以下内容：\n```javascript\nimport Vue from \'vue\'\nimport ElementUI from \'element-ui\'\nimport \'element-ui/lib/theme-chalk/index.css\'\nimport App from \'./App.vue\'\n\nVue.use(ElementUI)\n\nnew Vue({\n  el: \'#app\',\n  render: h => h(App)\n})\n\n```\n以上代码便完成了 Element 的引入。需要注意的是，样式文件需要单独引入。\n\n#### 按需引入\n借助 babel-plugin-component，我们可以只引入需要的组件，以达到减小项目体积的目的。\n\n首先，安装 babel-plugin-component：\n\n', '<h2>快速上手</h2>\n<p>本节将介绍如何在项目中使用 Element。</p>\n<h3>使用 Starter Kit</h3>\n<p>我们提供了通用的项目模板，你可以直接使用。对于 Laravel 用户，我们也准备了相应的模板，同样可以直接下载使用。</p>\n<p>如果不希望使用我们提供的模板，请继续阅读。</p>\n<h3>使用 vue-cli</h3>\n<p>我们还可以使用 vue-cli 初始化项目，命令如下：</p>\n<pre><code class=\"lang-language\">&gt; npm i -g vue-cli\n&gt; mkdir my-project &amp;&amp; cd my-project\n&gt; vue init webpack\n&gt; npm i &amp;&amp; npm i element-ui\n</code></pre>\n<h3>引入 Element</h3>\n<p>你可以引入整个 Element，或是根据需要仅引入部分组件。我们先介绍如何引入完整的 Element。</p>\n<h4>完整引入</h4>\n<p>在 main.js 中写入以下内容：</p>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'vue\'</span>\n<span class=\"hljs-keyword\">import</span> ElementUI <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'element-ui\'</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\'element-ui/lib/theme-chalk/index.css\'</span>\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./App.vue\'</span>\n\nVue.use(ElementUI)\n\n<span class=\"hljs-keyword\">new</span> Vue({\n  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">\'#app\'</span>,\n  <span class=\"hljs-attr\">render</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">h</span> =&gt;</span> h(App)\n})\n\n</code></div></pre>\n<p>以上代码便完成了 Element 的引入。需要注意的是，样式文件需要单独引入。</p>\n<h4>按需引入</h4>\n<p>借助 babel-plugin-component，我们可以只引入需要的组件，以达到减小项目体积的目的。</p>\n<p>首先，安装 babel-plugin-component：</p>\n');
INSERT INTO `me_article_body` VALUES (38, '# 你好，这里是iFishing\n\n> 我将在这里述说我的故事\n\n- 11111\n- 22222\n- 33333', '<h1><a id=\"iFishing_0\"></a>你好，这里是iFishing</h1>\n<blockquote>\n<p>我将在这里述说我的故事</p>\n</blockquote>\n<ul>\n<li>11111</li>\n<li>22222</li>\n<li>33333</li>\n</ul>\n');
INSERT INTO `me_article_body` VALUES (39, '## 一、DAO层开发的规律\n\n### 1.1 实体类与数据库表的规律\n\n- 实体类名与数据库表名对应\n- 实体类属性数据类型与数据库表字段类型对应\n- 实体类属性名与数据库表字段名对应\n\n> 结论： 实体类与数据表存在对应关系，并且是有规律的——只要知道了数据表的结构，就能够生成实体类； \n\n### 1.2  DAO层接口的规律\n\n> 所有实体的DAO接口中定义的方法也是有规律的，不同点就是实体类型不同 \n\n- BaseMapper\n\n  ```java\n  public interface BaseMapper<T>{\n      //通用方法\n      public int insertMessage(T t);\n      public T queryOneBykey(Integer key)\n  }\n  ```\n\n- UserMapper\n\n  ```java\n  public interface UserMapper extends BaseMapper<User>{\n  	\n  }\n  ```\n\n-  GoodsMapper\n\n  ```java\n  public interface GoodsMapper extends BaseMapper<Goods>{\n  	\n  }\n  ```\n\n### 1.3 DAO层mapper映射文件的规律\n\n> 对于BaseMapper接口定义的数据库操作方法因为使用了泛型， 无需映射文件 ；对于UserMapper和GoodsMapper需要映射文件，所有DAO的相同操作的映射文件是有规律可循的 \n\n- UserMapper.xml\n\n  ```xml\n  <insert id=\"insertMessage\" paramterType=\"User\">\n  	insert into users(user_id,username) values(#{userId},#{username})\n  </insert>\n  ```\n\n- GoodsMapper.xml\n\n  ```xml\n  <insert id=\"insertMessage\" paramterType=\"Goods\">\n  	insert into users(goods_id,goods_name) values(#{goodsId},#{goodsName})\n  </insert>\n  ```\n\n> 配置规则：根据实体类与数据库表的映射关系，反射创建实体\n\n- User\n\n  ```java\n  @Table(\"users\")\n  public class User{\n  \n      @Id\n      @Column(\"user_id\")\n      private int userId;\n      \n      @Column(\"username\")\n      private String username;\n  }\n  ```\n\n- Goods\n\n  ```java\n  @Table(\"product\")\n  public class Goods{\n  \n      @Id\n      @Column(\"goods_id\")\n      private int goodsId;\n      \n      @Column(\"goods_name\")\n      private String goodsNam\n  }\n  ```\n\n## 二、tkMapper简介\n\n>  基于MyBatis提供了很多第三方插件，这些插件通常可以完成数据操作方法的封装（BaseMapper）、数据库逆向工程工作(根据数据表生成实体类、生成映射文件)\n> MyBatis-plus\n> tkMapper \n\ntkMapper就是一个MyBatis插件，是在MyBatis的基础上提供了很多工具，在mybatis原来的基础上只做增强不做修改，让开发变得简单，提高开发效率 \n\n- 提供了针对单表通用的数据库操作方法,联合查询需要用原有的mybatis方式或者其他方式\n- 逆向工程（根据数据表生成实体类、dao接口、映射文件） \n\n## 三、tkMapper的整合\n\n###  3.1 基于SpringBoot完成MyBatis的整 \n\n```yml\nspring:\n  datasource:\n    druid:\n      url: jdbc:mysql://localhost:3306/xxx?useSSL=false&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\n      username: root\n      password: root\n      driver-class-name: com.mysql.cj.jdbc.Driver\n# mybatis配置\nmybatis:\n  mapper-locations: classpath:mappers/*Mapper.xml\n  type-aliases-package: com.neuedu.tkmapperdemo.pojo\n```\n\n```xml\n<!--mybatis-spring-boot-->\n<dependency>\n    <groupId>org.mybatis.spring.boot</groupId>\n    <artifactId>mybatis-spring-boot-starter</artifactId>\n    <version>2.2.0</version>\n</dependency>\n<dependency>\n    <groupId>mysql</groupId>\n     <artifactId>mysql-connector-java</artifactId>\n     <version>8.0.26</version>\n</dependency>\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>druid-spring-boot-starter</artifactId>\n     <version>1.2.8</version>\n</dependency>\n```\n\n###  3.2 整合tkMapper\n\n####  3.2.1 添加tkMapper的依赖 \n\n```xml\n<dependency>\n    <groupId>tk.mybatis</groupId>\n    <artifactId>mapper-spring-boot-starter</artifactId>\n    <version>2.1.5</version>\n</dependency>\n```\n\n 3.2.2 修改启动类的` @MapperScan` 注解的包 为` tk.mybatis.spring.annotation.MapperScan `\n\n\n```java\nimport tk.mybatis.spring.annotation.MapperScan;\n\n@SpringBootApplication\n@MapperScan(\"com.neuedu.tkmapperdemo.dao\")\npublic class TkmapperDemoApplication {\n    public static void main(String[] args) {\n    SpringApplication.run(TkmapperDemoApplication.class, args);\n}\n}\n```\n\n## 四、tkMapper的使用\n\n###  4.1 创建数据表\n\n```sql\nDROP TABLE IF EXISTS `users`;\nCREATE TABLE `users`  (\n`user_id` int(11) NOT NULL AUTO_INCREMENT COMMENT \'主键id;用户id\',\n`username` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT \'用户名;用户名\',\n`password` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT \'密码;密码\',\n`nickname` varchar(1024) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT \'昵称;昵称\',\n`realname` varchar(90) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT \'真实姓名;真实姓名\',\n`user_img` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT \'头像;头像\',\n`user_phone` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT \'手机号;手机号\',\n`user_email` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT \'邮箱地址;邮箱地址\',\n`user_sex` varchar(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT \'性别:M(男) or F(女);M(男) or F(女)\',\n`user_birthday` datetime(0) NULL DEFAULT NULL COMMENT \'生日;生日\',\n`user_createtime` datetime(0) NULL DEFAULT NULL COMMENT \'注册时间;创建时间\',\n`user_modtime` datetime(0) NULL DEFAULT NULL COMMENT \'更新时间;更新时间\',\nPRIMARY KEY (`user_id`) USING BTREE,\nUNIQUE INDEX `username`(`username`) USING BTREE\n) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = \'用户信息\' ROW_FORMAT = Dynamic;\n\n```\n\n###  4.2 创建实体类 \n\n> 当实体类名与数据库表名不一致时需要使用@Table注解指定表名 @Table(name =\"users\" )\n>\n> 当实体类属性名与数据库表字段名不一致时,比如 数据库字段:userNo  实体类属性：userId, 需要使用@Column(name=\"userNo\")\n>\n> 一致的情况：\n>\n> ​				数据库字段             实体类属性\n>\n> ​                 user_id                    userId\n>\n> ​                 userId                       userId   \n>\n> 使用@Id指定表主键对应的数据库属性                \n\n```java\n@Data\npublic class User {\n    @Id\n    private Integer userId;\n    private String username;\n    private String password;\n    private String nickname;\n    private String realname;\n    private String userImg;\n    private String userPhone;\n    private String userEmail;\n    private String userSex;\n    private Date userBirthday;\n    private Date userCreatetime;\n    private Date userModtime;\n}\n```\n\n###  4.3 创建DAO接口 \n\n>  tkMapper已经完成了对单表的通用操作的封装，封装在Mapper接口和MySqlMapper接口；因此如果我们要完成对单表的操作，只需自定义DAO接口继承Mapper接口和MySqlMapper接口即可\n\n```java\npublic interface UserMapper extends Mapper<User>, MySqlMapper<User> {\n}\n```\n\n### 4.4 测试 \n\n```java\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes = TkmapperDemoApplication.class)\npublic class UserDAOTest {\n\n    @Autowired\n    private UserMapper userMapper;\n    \n	@Test\n    public void test(){\n        User user = new User();\n        user.setUsername(\"lisi\");\n        user.setPassword(\"123\");\n        user.setUserImg(\"img/touxiang.png\");\n        ..\n        user.setUserRegtime(new Date());\n        user.setUserModtime(new Date());\n        int row = userMapper.insert(user);\n        System.out.println(row);\n    }\n}    \n```\n\n## 五、 tkMapper常用方法\n\n```java\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes = TkmapperDemoApplication.class)\npublic class CategoryDAOTest {\n    @Autowired\n    private CategoryDAO categoryDAO;\n    @Test\n    public void testInsert(){\n        Category category = new Category(0,\"测试类别1\",1,0);\n        //int i = categoryDAO.insert(category);\n        int i = categoryDAO.insertUseGeneratedKeys(category);\n        System.out.println(category.getCategoryId());\n        assertEquals(1,i);\n    }\n    \n    @Test\n    public void testUpdate(){\n        Category category = new Category(70,\"测试类别2\",1,0);\n        int i = categoryDAO.updateByPrimaryKey(category);\n        // 根据自定义条件修改，Example example就是封装条件的\n        // int i1 = categoryDAO.updateByExample( Example example);\n        assertEquals(1,i);\n    }\n    \n    @Test\n    public void testDelete(){\n        int i = categoryDAO.deleteByPrimaryKey(70);\n        // 根据条件删除\n        //int i1 = categoryDAO.deleteByExample(Example example);\n        assertEquals(1,i);\n    } \n    \n    @Test\n    public void testSelect1(){\n    //查询所有\n    List<Category> categories = categoryDAO.selectAll();\n        for (Category category: categories) {\n        System.out.println(category);\n        }\n    }\n    \n    @Test\n    public void testSelect2(){\n        //根据主键查询\n        Category category = categoryDAO.selectByPrimaryKey(66);\n        System.out.println(category);\n    }\n    \n    @Test\n    public void testSelect3(){\n        //条件查询\n        //1.创建一个Example封装 类别Category查询条件\n        Example example = new Example(Category.class);\n        Example.Criteria criteria = example.createCriteria();\n        criteria.andEqualTo(\"categoryLevel\",1);\n        criteria.orLike(\"categoryName\",\"%化%\");\n        List<Category> categories = categoryDAO.selectByExample(example);\n        for (Category category: categories) {\n       	 System.out.println(category);\n        }\n    }\n    \n    @Test\n    public void testSelect4(){\n        //分⻚查询\n        int pageNum = 2;\n        int pageSize = 10;\n        int start = (pageNum-1)*pageSize;\n        RowBounds rowBounds = new RowBounds(start,pageSize);\n        List<Category> categories = categoryDAO.selectByRowBounds(new Category(), rowBounds);\n        for (Category category: categories) {\n        	System.out.println(category);\n        }\n        //查询总记录数\n        int i = categoryDAO.selectCount(new Category());\n        System.out.println(i);\n    }\n    @Test\n    public void testSelect5(){\n        //带条件分⻚\n        //条件\n        Example example = new Example(Category.class);\n        Example.Criteria criteria = example.createCriteria();\n        criteria.andEqualTo(\"categoryLevel\",1);\n        //分⻚\n        int pageNum = 2;\n        int pageSize = 3;\n        int start = (pageNum-1)*pageSize;\n        RowBounds rowBounds = new RowBounds(start,pageSize);\n        List<Category> categories = categoryDAO.selectByExampleAndRowBounds(example,rowBounds);\n        for (Category category: categories) {\n        System.out.println(category);\n        }\n        //查询总记录数（满足条件）\n        int i = categoryDAO.selectCountByExample(example);\n        System.out.println(i);\n    }\n}\n```\n\n## 六、 tkMapper是如何进行关联查询 \n\n###  6.1 所有的关联查询都可以通过多个单表操作实现 \n\n```java\n//查询用户同时查询订单\nExample example = new Example(User.class);\nExample.Criteria criteria = example.createCriteria();\ncriteria.andEqualTo(\"username\",\"zhangsan\");\n//根据用户名查询用户\n//1.先根据用户名查询用户信息\nList<User> users = userDAO.selectByExample(example);\nUser user = users.get(0);\n//2.再根据用户id到订单表查询订单\nExample example1 = new Example(Orders.class);\nExample.Criteria criteria1 = example1.createCriteria();\ncriteria1.andEqualTo(\"userId\",user.getUserId());\nList<Orders> ordersList = orderDAO.selectByExample(example1);\n//3.将查询到订单集合设置到user\nuser.setOrdersList(ordersList);\nSystem.out.println(user);\n```\n\n###  6.2 自定义连接查询 \n\n>  在使用tkMapper,DAO继承Mapper和MySqlMapper之后，还可以自定义查询 \n\n省略\n\n## 7、逆向工程\n\n>  逆向工程，根据创建好的数据表，生成实体类、DAO、映射文件 \n>\n> mybatis、mybatis-plus均有逆向工程的操作\n\n###  7.1 添加逆向工程依赖 \n\n>  依赖是一个mybatis的maven插件 \n\n```xml\n<plugin>\n <groupId>org.mybatis.generator</groupId>\n    <artifactId>mybatis-generator-maven-plugin</artifactId>\n  <version>1.3.7</version>\n\n<dependencies>\n    <dependency>\n        <groupId>mysql</groupId>\n        <artifactId>mysql-connector-java</artifactId>\n        <version>8.0.26</version>\n    </dependency>\n\n    <dependency>\n        <groupId>tk.mybatis</groupId>\n        <artifactId>mapper</artifactId>\n        <version>4.1.5</version>\n    </dependency>\n</dependencies>\n</plugin>\n```\n\n###  7.2 逆向工程配置 \n\n-  在resources/utils目录下创建generatorConfig.xml \n\n  ```xml\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <!DOCTYPE generatorConfiguration\n          PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n          \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n  <generatorConfiguration>\n      <!-- 引入数据库连接配置 -->\n      <!-- <properties resource=\"jdbc.properties\"/>-->\n      <context id=\"Mysql\" targetRuntime=\"MyBatis3Simple\" defaultModelType=\"flat\">\n          <property name=\"beginningDelimiter\" value=\"`\"/>\n          <property name=\"endingDelimiter\" value=\"`\"/>\n          <!-- 配置 BaseMapper -->\n          <plugin type=\"tk.mybatis.mapper.generator.MapperPlugin\">\n              <property name=\"mappers\" value=\"com.neuedu.demo.utils.BaseMapper\"/>\n          </plugin>\n          <!-- 配置数据库连接 -->\n          <jdbcConnection driverClass=\"com.mysql.cj.jdbc.Driver\"\n                          connectionURL=\"jdbc:mysql://localhost:3306/mall?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai\"\n                          userId=\"root\" password=\"root\">\n              <!--解决映射文件出现重复多余字段-->\n              <!--<property name=\"nullCatalogMeansCurrent\" value=\"true\"/>-->\n          </jdbcConnection>\n          <!-- 配置实体类存放路径 -->\n          <javaModelGenerator targetPackage=\"com.neuedu.demo.pojo\"\n                              targetProject=\"src/main/java\"/>\n          <!-- 配置 XML 存放路径 -->\n          <sqlMapGenerator targetPackage=\"/\" targetProject=\"src/main/resources/mappers\"/>\n          <!-- 配置 DAO 存放路径 -->\n          <javaClientGenerator targetPackage=\"com.neuedu.demo.dao\"\n                               targetProject=\"src/main/java\" type=\"XMLMAPPER\"/>\n  \n          <!-- 配置需要指定生成的数据库和表，% 代表所有表 -->\n          <!-- tableName指定表名，domainObjectName指定表对应的JavaBean名 -->\n          <!--<table tableName=\"%\">-->\n              <!--&lt;!&ndash; mysql 配置 &ndash;&gt;-->\n              <!--&lt;!&ndash; <generatedKey column=\"id\" sqlStatement=\"Mysql\" identity=\"true\"/>&ndash;&gt;-->\n          <!--</table>-->\n          <!--<table tableName=\"employees\" domainObjectName=\"Employee\"-->\n                 <!--enableCountByExample=\"false\" enableUpdateByExample=\"true\"-->\n                 <!--enableDeleteByExample=\"false\" enableSelectByExample=\"true\"-->\n                 <!--selectByExampleQueryId=\"false\">-->\n          <!--</table>-->\n          <!-- <table tableName=\"tb_roles\">-->\n          <!-- &lt;!&ndash; mysql 配置 &ndash;&gt;-->\n          <!-- <generatedKey column=\"roleid\" sqlStatement=\"Mysql\" identity=\"true\"/>-->\n          <!-- </table>-->\n          <!-- <table tableName=\"tb_permissions\">-->\n          <!-- &lt;!&ndash; mysql 配置 &ndash;&gt;-->\n          <!-- <generatedKey column=\"perid\" sqlStatement=\"Mysql\" identity=\"true\"/>-->\n          <!-- </table>-->\n          <table tableName=\"users\"> </table>\n          <table tableName=\"user_login_history\"> </table>\n          <table tableName=\"user_address\"> </table>\n          <table tableName=\"slideshow_img\"> </table>\n          <table tableName=\"product_spu\"> </table>\n          <table tableName=\"product_sku\"> </table>\n          <table tableName=\"product_params\"> </table>\n          <table tableName=\"product_img\"> </table>\n          <table tableName=\"product_comments\"> </table>\n          <table tableName=\"product_cart\"> </table>\n          <table tableName=\"orders\"> </table>\n          <table tableName=\"order_item\"> </table>\n          <table tableName=\"category\"> </table>\n      </context>\n  </generatorConfiguration>\n  ```\n\n###  7.3 将配置文件设置到逆向工程的maven插件 \n\n![1669985484937](images/1669985484937.png)\n\n###  7.4 执行逆向生成 \n\n![1669835651329](images/1669835651329.png)', '<h2><a id=\"DAO_0\"></a>一、DAO层开发的规律</h2>\n<h3><a id=\"11__2\"></a>1.1 实体类与数据库表的规律</h3>\n<ul>\n<li>实体类名与数据库表名对应</li>\n<li>实体类属性数据类型与数据库表字段类型对应</li>\n<li>实体类属性名与数据库表字段名对应</li>\n</ul>\n<blockquote>\n<p>结论： 实体类与数据表存在对应关系，并且是有规律的——只要知道了数据表的结构，就能够生成实体类；</p>\n</blockquote>\n<h3><a id=\"12__DAO_10\"></a>1.2  DAO层接口的规律</h3>\n<blockquote>\n<p>所有实体的DAO接口中定义的方法也是有规律的，不同点就是实体类型不同</p>\n</blockquote>\n<ul>\n<li>\n<p>BaseMapper</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">BaseMapper</span>&lt;T&gt;{\n    <span class=\"hljs-comment\">//通用方法</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">insertMessage</span><span class=\"hljs-params\">(T t)</span>;\n    <span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title function_\">queryOneBykey</span><span class=\"hljs-params\">(Integer key)</span>\n}\n</code></div></pre>\n</li>\n<li>\n<p>UserMapper</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserMapper</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">BaseMapper</span>&lt;User&gt;{\n	\n}\n</code></div></pre>\n</li>\n<li>\n<p>GoodsMapper</p>\n</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">GoodsMapper</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">BaseMapper</span>&lt;Goods&gt;{\n	\n}\n</code></div></pre>\n<h3><a id=\"13_DAOmapper_40\"></a>1.3 DAO层mapper映射文件的规律</h3>\n<blockquote>\n<p>对于BaseMapper接口定义的数据库操作方法因为使用了泛型， 无需映射文件 ；对于UserMapper和GoodsMapper需要映射文件，所有DAO的相同操作的映射文件是有规律可循的</p>\n</blockquote>\n<ul>\n<li>\n<p>UserMapper.xml</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">insert</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;insertMessage&quot;</span> <span class=\"hljs-attr\">paramterType</span>=<span class=\"hljs-string\">&quot;User&quot;</span>&gt;</span>\n	insert into users(user_id,username) values(#{userId},#{username})\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">insert</span>&gt;</span>\n</code></div></pre>\n</li>\n<li>\n<p>GoodsMapper.xml</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">insert</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;insertMessage&quot;</span> <span class=\"hljs-attr\">paramterType</span>=<span class=\"hljs-string\">&quot;Goods&quot;</span>&gt;</span>\n	insert into users(goods_id,goods_name) values(#{goodsId},#{goodsName})\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">insert</span>&gt;</span>\n</code></div></pre>\n</li>\n</ul>\n<blockquote>\n<p>配置规则：根据实体类与数据库表的映射关系，反射创建实体</p>\n</blockquote>\n<ul>\n<li>\n<p>User</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@Table(&quot;users&quot;)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span>{\n\n    <span class=\"hljs-meta\">@Id</span>\n    <span class=\"hljs-meta\">@Column(&quot;user_id&quot;)</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> userId;\n    \n    <span class=\"hljs-meta\">@Column(&quot;username&quot;)</span>\n    <span class=\"hljs-keyword\">private</span> String username;\n}\n</code></div></pre>\n</li>\n<li>\n<p>Goods</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@Table(&quot;product&quot;)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Goods</span>{\n\n    <span class=\"hljs-meta\">@Id</span>\n    <span class=\"hljs-meta\">@Column(&quot;goods_id&quot;)</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> goodsId;\n    \n    <span class=\"hljs-meta\">@Column(&quot;goods_name&quot;)</span>\n    <span class=\"hljs-keyword\">private</span> String goodsNam\n}\n</code></div></pre>\n</li>\n</ul>\n<h2><a id=\"tkMapper_92\"></a>二、tkMapper简介</h2>\n<blockquote>\n<p>基于MyBatis提供了很多第三方插件，这些插件通常可以完成数据操作方法的封装（BaseMapper）、数据库逆向工程工作(根据数据表生成实体类、生成映射文件)<br />\nMyBatis-plus<br />\ntkMapper</p>\n</blockquote>\n<p>tkMapper就是一个MyBatis插件，是在MyBatis的基础上提供了很多工具，在mybatis原来的基础上只做增强不做修改，让开发变得简单，提高开发效率</p>\n<ul>\n<li>提供了针对单表通用的数据库操作方法,联合查询需要用原有的mybatis方式或者其他方式</li>\n<li>逆向工程（根据数据表生成实体类、dao接口、映射文件）</li>\n</ul>\n<h2><a id=\"tkMapper_103\"></a>三、tkMapper的整合</h2>\n<h3><a id=\"31_SpringBootMyBatis_105\"></a>3.1 基于SpringBoot完成MyBatis的整</h3>\n<pre><div class=\"hljs\"><code class=\"lang-yml\"><span class=\"hljs-attr\">spring:</span>\n  <span class=\"hljs-attr\">datasource:</span>\n    <span class=\"hljs-attr\">druid:</span>\n      <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">jdbc:mysql://localhost:3306/xxx?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span>\n      <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">root</span>\n      <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">root</span>\n      <span class=\"hljs-attr\">driver-class-name:</span> <span class=\"hljs-string\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"hljs-comment\"># mybatis配置</span>\n<span class=\"hljs-attr\">mybatis:</span>\n  <span class=\"hljs-attr\">mapper-locations:</span> <span class=\"hljs-string\">classpath:mappers/*Mapper.xml</span>\n  <span class=\"hljs-attr\">type-aliases-package:</span> <span class=\"hljs-string\">com.neuedu.tkmapperdemo.pojo</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-comment\">&lt;!--mybatis-spring-boot--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.2.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>mysql<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>8.0.26<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>druid-spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.2.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></div></pre>\n<h3><a id=\"32_tkMapper_140\"></a>3.2 整合tkMapper</h3>\n<h4><a id=\"321_tkMapper_142\"></a>3.2.1 添加tkMapper的依赖</h4>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>tk.mybatis<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.1.5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></div></pre>\n<p>3.2.2 修改启动类的<code> @MapperScan</code> 注解的包 为<code>tk.mybatis.spring.annotation.MapperScan</code></p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">import</span> tk.mybatis.spring.annotation.MapperScan;\n\n<span class=\"hljs-meta\">@SpringBootApplication</span>\n<span class=\"hljs-meta\">@MapperScan(&quot;com.neuedu.tkmapperdemo.dao&quot;)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TkmapperDemoApplication</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    SpringApplication.run(TkmapperDemoApplication.class, args);\n}\n}\n</code></div></pre>\n<h2><a id=\"tkMapper_167\"></a>四、tkMapper的使用</h2>\n<h3><a id=\"41__169\"></a>4.1 创建数据表</h3>\n<pre><div class=\"hljs\"><code class=\"lang-sql\"><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> IF <span class=\"hljs-keyword\">EXISTS</span> `users`;\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `users`  (\n`user_id` <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"hljs-string\">&#x27;主键id;用户id&#x27;</span>,\n`username` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;用户名;用户名&#x27;</span>,\n`password` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">64</span>) <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;密码;密码&#x27;</span>,\n`nickname` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">1024</span>) <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;昵称;昵称&#x27;</span>,\n`realname` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">90</span>) <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;真实姓名;真实姓名&#x27;</span>,\n`user_img` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;头像;头像&#x27;</span>,\n`user_phone` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;手机号;手机号&#x27;</span>,\n`user_email` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;邮箱地址;邮箱地址&#x27;</span>,\n`user_sex` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">1</span>) <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;性别:M(男) or F(女);M(男) or F(女)&#x27;</span>,\n`user_birthday` datetime(<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;生日;生日&#x27;</span>,\n`user_createtime` datetime(<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;注册时间;创建时间&#x27;</span>,\n`user_modtime` datetime(<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;更新时间;更新时间&#x27;</span>,\n<span class=\"hljs-keyword\">PRIMARY</span> KEY (`user_id`) <span class=\"hljs-keyword\">USING</span> BTREE,\n<span class=\"hljs-keyword\">UNIQUE</span> INDEX `username`(`username`) <span class=\"hljs-keyword\">USING</span> BTREE\n) ENGINE <span class=\"hljs-operator\">=</span> InnoDB <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> <span class=\"hljs-operator\">=</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> <span class=\"hljs-operator\">=</span> utf8_general_ci COMMENT <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;用户信息&#x27;</span> ROW_FORMAT <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">Dynamic</span>;\n\n</code></div></pre>\n<h3><a id=\"42__192\"></a>4.2 创建实体类</h3>\n<blockquote>\n<p>当实体类名与数据库表名不一致时需要使用@Table注解指定表名 @Table(name =“users” )</p>\n<p>当实体类属性名与数据库表字段名不一致时,比如 数据库字段:userNo  实体类属性：userId, 需要使用@Column(name=“userNo”)</p>\n<p>一致的情况：</p>\n<p>​				数据库字段             实体类属性</p>\n<p>​                 user_id                    userId</p>\n<p>​                 userId                       userId</p>\n<p>使用@Id指定表主键对应的数据库属性</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span> {\n    <span class=\"hljs-meta\">@Id</span>\n    <span class=\"hljs-keyword\">private</span> Integer userId;\n    <span class=\"hljs-keyword\">private</span> String username;\n    <span class=\"hljs-keyword\">private</span> String password;\n    <span class=\"hljs-keyword\">private</span> String nickname;\n    <span class=\"hljs-keyword\">private</span> String realname;\n    <span class=\"hljs-keyword\">private</span> String userImg;\n    <span class=\"hljs-keyword\">private</span> String userPhone;\n    <span class=\"hljs-keyword\">private</span> String userEmail;\n    <span class=\"hljs-keyword\">private</span> String userSex;\n    <span class=\"hljs-keyword\">private</span> Date userBirthday;\n    <span class=\"hljs-keyword\">private</span> Date userCreatetime;\n    <span class=\"hljs-keyword\">private</span> Date userModtime;\n}\n</code></div></pre>\n<h3><a id=\"43_DAO_227\"></a>4.3 创建DAO接口</h3>\n<blockquote>\n<p>tkMapper已经完成了对单表的通用操作的封装，封装在Mapper接口和MySqlMapper接口；因此如果我们要完成对单表的操作，只需自定义DAO接口继承Mapper接口和MySqlMapper接口即可</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserMapper</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Mapper</span>&lt;User&gt;, MySqlMapper&lt;User&gt; {\n}\n</code></div></pre>\n<h3><a id=\"44__236\"></a>4.4 测试</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@RunWith(SpringRunner.class)</span>\n<span class=\"hljs-meta\">@SpringBootTest(classes = TkmapperDemoApplication.class)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserDAOTest</span> {\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> UserMapper userMapper;\n    \n	<span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>{\n        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>();\n        user.setUsername(<span class=\"hljs-string\">&quot;lisi&quot;</span>);\n        user.setPassword(<span class=\"hljs-string\">&quot;123&quot;</span>);\n        user.setUserImg(<span class=\"hljs-string\">&quot;img/touxiang.png&quot;</span>);\n        ..\n        user.setUserRegtime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());\n        user.setUserModtime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">row</span> <span class=\"hljs-operator\">=</span> userMapper.insert(user);\n        System.out.println(row);\n    }\n}    \n</code></div></pre>\n<h2><a id=\"_tkMapper_261\"></a>五、 tkMapper常用方法</h2>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@RunWith(SpringRunner.class)</span>\n<span class=\"hljs-meta\">@SpringBootTest(classes = TkmapperDemoApplication.class)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CategoryDAOTest</span> {\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> CategoryDAO categoryDAO;\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testInsert</span><span class=\"hljs-params\">()</span>{\n        <span class=\"hljs-type\">Category</span> <span class=\"hljs-variable\">category</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Category</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">&quot;测试类别1&quot;</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-comment\">//int i = categoryDAO.insert(category);</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> categoryDAO.insertUseGeneratedKeys(category);\n        System.out.println(category.getCategoryId());\n        assertEquals(<span class=\"hljs-number\">1</span>,i);\n    }\n    \n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUpdate</span><span class=\"hljs-params\">()</span>{\n        <span class=\"hljs-type\">Category</span> <span class=\"hljs-variable\">category</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Category</span>(<span class=\"hljs-number\">70</span>,<span class=\"hljs-string\">&quot;测试类别2&quot;</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> categoryDAO.updateByPrimaryKey(category);\n        <span class=\"hljs-comment\">// 根据自定义条件修改，Example example就是封装条件的</span>\n        <span class=\"hljs-comment\">// int i1 = categoryDAO.updateByExample( Example example);</span>\n        assertEquals(<span class=\"hljs-number\">1</span>,i);\n    }\n    \n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testDelete</span><span class=\"hljs-params\">()</span>{\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> categoryDAO.deleteByPrimaryKey(<span class=\"hljs-number\">70</span>);\n        <span class=\"hljs-comment\">// 根据条件删除</span>\n        <span class=\"hljs-comment\">//int i1 = categoryDAO.deleteByExample(Example example);</span>\n        assertEquals(<span class=\"hljs-number\">1</span>,i);\n    } \n    \n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testSelect1</span><span class=\"hljs-params\">()</span>{\n    <span class=\"hljs-comment\">//查询所有</span>\n    List&lt;Category&gt; categories = categoryDAO.selectAll();\n        <span class=\"hljs-keyword\">for</span> (Category category: categories) {\n        System.out.println(category);\n        }\n    }\n    \n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testSelect2</span><span class=\"hljs-params\">()</span>{\n        <span class=\"hljs-comment\">//根据主键查询</span>\n        <span class=\"hljs-type\">Category</span> <span class=\"hljs-variable\">category</span> <span class=\"hljs-operator\">=</span> categoryDAO.selectByPrimaryKey(<span class=\"hljs-number\">66</span>);\n        System.out.println(category);\n    }\n    \n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testSelect3</span><span class=\"hljs-params\">()</span>{\n        <span class=\"hljs-comment\">//条件查询</span>\n        <span class=\"hljs-comment\">//1.创建一个Example封装 类别Category查询条件</span>\n        <span class=\"hljs-type\">Example</span> <span class=\"hljs-variable\">example</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Example</span>(Category.class);\n        Example.<span class=\"hljs-type\">Criteria</span> <span class=\"hljs-variable\">criteria</span> <span class=\"hljs-operator\">=</span> example.createCriteria();\n        criteria.andEqualTo(<span class=\"hljs-string\">&quot;categoryLevel&quot;</span>,<span class=\"hljs-number\">1</span>);\n        criteria.orLike(<span class=\"hljs-string\">&quot;categoryName&quot;</span>,<span class=\"hljs-string\">&quot;%化%&quot;</span>);\n        List&lt;Category&gt; categories = categoryDAO.selectByExample(example);\n        <span class=\"hljs-keyword\">for</span> (Category category: categories) {\n       	 System.out.println(category);\n        }\n    }\n    \n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testSelect4</span><span class=\"hljs-params\">()</span>{\n        <span class=\"hljs-comment\">//分⻚查询</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">pageNum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">pageSize</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">start</span> <span class=\"hljs-operator\">=</span> (pageNum-<span class=\"hljs-number\">1</span>)*pageSize;\n        <span class=\"hljs-type\">RowBounds</span> <span class=\"hljs-variable\">rowBounds</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RowBounds</span>(start,pageSize);\n        List&lt;Category&gt; categories = categoryDAO.selectByRowBounds(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Category</span>(), rowBounds);\n        <span class=\"hljs-keyword\">for</span> (Category category: categories) {\n        	System.out.println(category);\n        }\n        <span class=\"hljs-comment\">//查询总记录数</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> categoryDAO.selectCount(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Category</span>());\n        System.out.println(i);\n    }\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testSelect5</span><span class=\"hljs-params\">()</span>{\n        <span class=\"hljs-comment\">//带条件分⻚</span>\n        <span class=\"hljs-comment\">//条件</span>\n        <span class=\"hljs-type\">Example</span> <span class=\"hljs-variable\">example</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Example</span>(Category.class);\n        Example.<span class=\"hljs-type\">Criteria</span> <span class=\"hljs-variable\">criteria</span> <span class=\"hljs-operator\">=</span> example.createCriteria();\n        criteria.andEqualTo(<span class=\"hljs-string\">&quot;categoryLevel&quot;</span>,<span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-comment\">//分⻚</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">pageNum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">pageSize</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">3</span>;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">start</span> <span class=\"hljs-operator\">=</span> (pageNum-<span class=\"hljs-number\">1</span>)*pageSize;\n        <span class=\"hljs-type\">RowBounds</span> <span class=\"hljs-variable\">rowBounds</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RowBounds</span>(start,pageSize);\n        List&lt;Category&gt; categories = categoryDAO.selectByExampleAndRowBounds(example,rowBounds);\n        <span class=\"hljs-keyword\">for</span> (Category category: categories) {\n        System.out.println(category);\n        }\n        <span class=\"hljs-comment\">//查询总记录数（满足条件）</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> categoryDAO.selectCountByExample(example);\n        System.out.println(i);\n    }\n}\n</code></div></pre>\n<h2><a id=\"_tkMapper_363\"></a>六、 tkMapper是如何进行关联查询</h2>\n<h3><a id=\"61__365\"></a>6.1 所有的关联查询都可以通过多个单表操作实现</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">//查询用户同时查询订单</span>\n<span class=\"hljs-type\">Example</span> <span class=\"hljs-variable\">example</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Example</span>(User.class);\nExample.<span class=\"hljs-type\">Criteria</span> <span class=\"hljs-variable\">criteria</span> <span class=\"hljs-operator\">=</span> example.createCriteria();\ncriteria.andEqualTo(<span class=\"hljs-string\">&quot;username&quot;</span>,<span class=\"hljs-string\">&quot;zhangsan&quot;</span>);\n<span class=\"hljs-comment\">//根据用户名查询用户</span>\n<span class=\"hljs-comment\">//1.先根据用户名查询用户信息</span>\nList&lt;User&gt; users = userDAO.selectByExample(example);\n<span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> users.get(<span class=\"hljs-number\">0</span>);\n<span class=\"hljs-comment\">//2.再根据用户id到订单表查询订单</span>\n<span class=\"hljs-type\">Example</span> <span class=\"hljs-variable\">example1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Example</span>(Orders.class);\nExample.<span class=\"hljs-type\">Criteria</span> <span class=\"hljs-variable\">criteria1</span> <span class=\"hljs-operator\">=</span> example1.createCriteria();\ncriteria1.andEqualTo(<span class=\"hljs-string\">&quot;userId&quot;</span>,user.getUserId());\nList&lt;Orders&gt; ordersList = orderDAO.selectByExample(example1);\n<span class=\"hljs-comment\">//3.将查询到订单集合设置到user</span>\nuser.setOrdersList(ordersList);\nSystem.out.println(user);\n</code></div></pre>\n<h3><a id=\"62__386\"></a>6.2 自定义连接查询</h3>\n<blockquote>\n<p>在使用tkMapper,DAO继承Mapper和MySqlMapper之后，还可以自定义查询</p>\n</blockquote>\n<p>省略</p>\n<h2><a id=\"7_392\"></a>7、逆向工程</h2>\n<blockquote>\n<p>逆向工程，根据创建好的数据表，生成实体类、DAO、映射文件</p>\n<p>mybatis、mybatis-plus均有逆向工程的操作</p>\n</blockquote>\n<h3><a id=\"71__398\"></a>7.1 添加逆向工程依赖</h3>\n<blockquote>\n<p>依赖是一个mybatis的maven插件</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.3.7<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>mysql<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>8.0.26<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>tk.mybatis<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mapper<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.1.5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n</code></div></pre>\n<h3><a id=\"72__424\"></a>7.2 逆向工程配置</h3>\n<ul>\n<li>在resources/utils目录下创建generatorConfig.xml</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>\n<span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">generatorConfiguration</span>\n        <span class=\"hljs-keyword\">PUBLIC</span> <span class=\"hljs-string\">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span>\n        <span class=\"hljs-string\">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">generatorConfiguration</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- 引入数据库连接配置 --&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- &lt;properties resource=&quot;jdbc.properties&quot;/&gt;--&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;Mysql&quot;</span> <span class=\"hljs-attr\">targetRuntime</span>=<span class=\"hljs-string\">&quot;MyBatis3Simple&quot;</span> <span class=\"hljs-attr\">defaultModelType</span>=<span class=\"hljs-string\">&quot;flat&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;beginningDelimiter&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;`&quot;</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;endingDelimiter&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;`&quot;</span>/&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 配置 BaseMapper --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;tk.mybatis.mapper.generator.MapperPlugin&quot;</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;mappers&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;com.neuedu.demo.utils.BaseMapper&quot;</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 配置数据库连接 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">jdbcConnection</span> <span class=\"hljs-attr\">driverClass</span>=<span class=\"hljs-string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>\n                        <span class=\"hljs-attr\">connectionURL</span>=<span class=\"hljs-string\">&quot;jdbc:mysql://localhost:3306/mall?useSSL=false<span class=\"hljs-symbol\">&amp;amp;</span>useUnicode=true<span class=\"hljs-symbol\">&amp;amp;</span>characterEncoding=UTF-8<span class=\"hljs-symbol\">&amp;amp;</span>serverTimezone=Asia/Shanghai&quot;</span>\n                        <span class=\"hljs-attr\">userId</span>=<span class=\"hljs-string\">&quot;root&quot;</span> <span class=\"hljs-attr\">password</span>=<span class=\"hljs-string\">&quot;root&quot;</span>&gt;</span>\n            <span class=\"hljs-comment\">&lt;!--解决映射文件出现重复多余字段--&gt;</span>\n            <span class=\"hljs-comment\">&lt;!--&lt;property name=&quot;nullCatalogMeansCurrent&quot; value=&quot;true&quot;/&gt;--&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">jdbcConnection</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 配置实体类存放路径 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">javaModelGenerator</span> <span class=\"hljs-attr\">targetPackage</span>=<span class=\"hljs-string\">&quot;com.neuedu.demo.pojo&quot;</span>\n                            <span class=\"hljs-attr\">targetProject</span>=<span class=\"hljs-string\">&quot;src/main/java&quot;</span>/&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 配置 XML 存放路径 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">sqlMapGenerator</span> <span class=\"hljs-attr\">targetPackage</span>=<span class=\"hljs-string\">&quot;/&quot;</span> <span class=\"hljs-attr\">targetProject</span>=<span class=\"hljs-string\">&quot;src/main/resources/mappers&quot;</span>/&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 配置 DAO 存放路径 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">javaClientGenerator</span> <span class=\"hljs-attr\">targetPackage</span>=<span class=\"hljs-string\">&quot;com.neuedu.demo.dao&quot;</span>\n                             <span class=\"hljs-attr\">targetProject</span>=<span class=\"hljs-string\">&quot;src/main/java&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;XMLMAPPER&quot;</span>/&gt;</span>\n\n        <span class=\"hljs-comment\">&lt;!-- 配置需要指定生成的数据库和表，% 代表所有表 --&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- tableName指定表名，domainObjectName指定表对应的JavaBean名 --&gt;</span>\n        <span class=\"hljs-comment\">&lt;!--&lt;table tableName=&quot;%&quot;&gt;--&gt;</span>\n            <span class=\"hljs-comment\">&lt;!--&amp;lt;!&amp;ndash; mysql 配置 &amp;ndash;&amp;gt;--&gt;</span>\n            <span class=\"hljs-comment\">&lt;!--&amp;lt;!&amp;ndash; &lt;generatedKey column=&quot;id&quot; sqlStatement=&quot;Mysql&quot; identity=&quot;true&quot;/&gt;&amp;ndash;&amp;gt;--&gt;</span>\n        <span class=\"hljs-comment\">&lt;!--&lt;/table&gt;--&gt;</span>\n        <span class=\"hljs-comment\">&lt;!--&lt;table tableName=&quot;employees&quot; domainObjectName=&quot;Employee&quot;--&gt;</span>\n               <span class=\"hljs-comment\">&lt;!--enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;true&quot;--&gt;</span>\n               <span class=\"hljs-comment\">&lt;!--enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;true&quot;--&gt;</span>\n               <span class=\"hljs-comment\">&lt;!--selectByExampleQueryId=&quot;false&quot;&gt;--&gt;</span>\n        <span class=\"hljs-comment\">&lt;!--&lt;/table&gt;--&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- &lt;table tableName=&quot;tb_roles&quot;&gt;--&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- &amp;lt;!&amp;ndash; mysql 配置 &amp;ndash;&amp;gt;--&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- &lt;generatedKey column=&quot;roleid&quot; sqlStatement=&quot;Mysql&quot; identity=&quot;true&quot;/&gt;--&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- &lt;/table&gt;--&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- &lt;table tableName=&quot;tb_permissions&quot;&gt;--&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- &amp;lt;!&amp;ndash; mysql 配置 &amp;ndash;&amp;gt;--&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- &lt;generatedKey column=&quot;perid&quot; sqlStatement=&quot;Mysql&quot; identity=&quot;true&quot;/&gt;--&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- &lt;/table&gt;--&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">tableName</span>=<span class=\"hljs-string\">&quot;users&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">tableName</span>=<span class=\"hljs-string\">&quot;user_login_history&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">tableName</span>=<span class=\"hljs-string\">&quot;user_address&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">tableName</span>=<span class=\"hljs-string\">&quot;slideshow_img&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">tableName</span>=<span class=\"hljs-string\">&quot;product_spu&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">tableName</span>=<span class=\"hljs-string\">&quot;product_sku&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">tableName</span>=<span class=\"hljs-string\">&quot;product_params&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">tableName</span>=<span class=\"hljs-string\">&quot;product_img&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">tableName</span>=<span class=\"hljs-string\">&quot;product_comments&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">tableName</span>=<span class=\"hljs-string\">&quot;product_cart&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">tableName</span>=<span class=\"hljs-string\">&quot;orders&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">tableName</span>=<span class=\"hljs-string\">&quot;order_item&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">tableName</span>=<span class=\"hljs-string\">&quot;category&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">context</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">generatorConfiguration</span>&gt;</span>\n</code></div></pre>\n<h3><a id=\"73_maven_495\"></a>7.3 将配置文件设置到逆向工程的maven插件</h3>\n<p><img src=\"images/1669985484937.png\" alt=\"1669985484937\" /></p>\n<h3><a id=\"74__499\"></a>7.4 执行逆向生成</h3>\n<p><img src=\"images/1669835651329.png\" alt=\"1669835651329\" /></p>\n');
INSERT INTO `me_article_body` VALUES (40, '## 一、DAO层开发的规律\n\n### 1.1 实体类与数据库表的规律\n\n- 实体类名与数据库表名对应\n- 实体类属性数据类型与数据库表字段类型对应\n- 实体类属性名与数据库表字段名对应\n\n> 结论： 实体类与数据表存在对应关系，并且是有规律的——只要知道了数据表的结构，就能够生成实体类； \n\n### 1.2  DAO层接口的规律\n\n> 所有实体的DAO接口中定义的方法也是有规律的，不同点就是实体类型不同 \n\n- BaseMapper\n\n  ```java\n  public interface BaseMapper<T>{\n      //通用方法\n      public int insertMessage(T t);\n      public T queryOneBykey(Integer key)\n  }\n  ```\n\n- UserMapper\n\n  ```java\n  public interface UserMapper extends BaseMapper<User>{\n  	\n  }\n  ```\n\n-  GoodsMapper\n\n  ```java\n  public interface GoodsMapper extends BaseMapper<Goods>{\n  	\n  }\n  ```\n\n### 1.3 DAO层mapper映射文件的规律\n\n> 对于BaseMapper接口定义的数据库操作方法因为使用了泛型， 无需映射文件 ；对于UserMapper和GoodsMapper需要映射文件，所有DAO的相同操作的映射文件是有规律可循的 \n\n- UserMapper.xml\n\n  ```xml\n  <insert id=\"insertMessage\" paramterType=\"User\">\n  	insert into users(user_id,username) values(#{userId},#{username})\n  </insert>\n  ```\n\n- GoodsMapper.xml\n\n  ```xml\n  <insert id=\"insertMessage\" paramterType=\"Goods\">\n  	insert into users(goods_id,goods_name) values(#{goodsId},#{goodsName})\n  </insert>\n  ```\n\n> 配置规则：根据实体类与数据库表的映射关系，反射创建实体\n\n- User\n\n  ```java\n  @Table(\"users\")\n  public class User{\n  \n      @Id\n      @Column(\"user_id\")\n      private int userId;\n      \n      @Column(\"username\")\n      private String username;\n  }\n  ```\n\n- Goods\n\n  ```java\n  @Table(\"product\")\n  public class Goods{\n  \n      @Id\n      @Column(\"goods_id\")\n      private int goodsId;\n      \n      @Column(\"goods_name\")\n      private String goodsNam\n  }\n  ```\n\n## 二、tkMapper简介\n\n>  基于MyBatis提供了很多第三方插件，这些插件通常可以完成数据操作方法的封装（BaseMapper）、数据库逆向工程工作(根据数据表生成实体类、生成映射文件)\n> MyBatis-plus\n> tkMapper \n\ntkMapper就是一个MyBatis插件，是在MyBatis的基础上提供了很多工具，在mybatis原来的基础上只做增强不做修改，让开发变得简单，提高开发效率 \n\n- 提供了针对单表通用的数据库操作方法,联合查询需要用原有的mybatis方式或者其他方式\n- 逆向工程（根据数据表生成实体类、dao接口、映射文件） \n\n## 三、tkMapper的整合\n\n###  3.1 基于SpringBoot完成MyBatis的整 \n\n```yml\nspring:\n  datasource:\n    druid:\n      url: jdbc:mysql://localhost:3306/xxx?useSSL=false&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\n      username: root\n      password: root\n      driver-class-name: com.mysql.cj.jdbc.Driver\n# mybatis配置\nmybatis:\n  mapper-locations: classpath:mappers/*Mapper.xml\n  type-aliases-package: com.neuedu.tkmapperdemo.pojo\n```\n\n```xml\n<!--mybatis-spring-boot-->\n<dependency>\n    <groupId>org.mybatis.spring.boot</groupId>\n    <artifactId>mybatis-spring-boot-starter</artifactId>\n    <version>2.2.0</version>\n</dependency>\n<dependency>\n    <groupId>mysql</groupId>\n     <artifactId>mysql-connector-java</artifactId>\n     <version>8.0.26</version>\n</dependency>\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>druid-spring-boot-starter</artifactId>\n     <version>1.2.8</version>\n</dependency>\n```\n\n###  3.2 整合tkMapper\n\n####  3.2.1 添加tkMapper的依赖 \n\n```xml\n<dependency>\n    <groupId>tk.mybatis</groupId>\n    <artifactId>mapper-spring-boot-starter</artifactId>\n    <version>2.1.5</version>\n</dependency>\n```\n\n 3.2.2 修改启动类的` @MapperScan` 注解的包 为` tk.mybatis.spring.annotation.MapperScan `\n\n\n```java\nimport tk.mybatis.spring.annotation.MapperScan;\n\n@SpringBootApplication\n@MapperScan(\"com.neuedu.tkmapperdemo.dao\")\npublic class TkmapperDemoApplication {\n    public static void main(String[] args) {\n    SpringApplication.run(TkmapperDemoApplication.class, args);\n}\n}\n```\n\n## 四、tkMapper的使用\n\n###  4.1 创建数据表\n\n```sql\nDROP TABLE IF EXISTS `users`;\nCREATE TABLE `users`  (\n`user_id` int(11) NOT NULL AUTO_INCREMENT COMMENT \'主键id;用户id\',\n`username` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT \'用户名;用户名\',\n`password` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT \'密码;密码\',\n`nickname` varchar(1024) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT \'昵称;昵称\',\n`realname` varchar(90) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT \'真实姓名;真实姓名\',\n`user_img` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT \'头像;头像\',\n`user_phone` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT \'手机号;手机号\',\n`user_email` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT \'邮箱地址;邮箱地址\',\n`user_sex` varchar(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT \'性别:M(男) or F(女);M(男) or F(女)\',\n`user_birthday` datetime(0) NULL DEFAULT NULL COMMENT \'生日;生日\',\n`user_createtime` datetime(0) NULL DEFAULT NULL COMMENT \'注册时间;创建时间\',\n`user_modtime` datetime(0) NULL DEFAULT NULL COMMENT \'更新时间;更新时间\',\nPRIMARY KEY (`user_id`) USING BTREE,\nUNIQUE INDEX `username`(`username`) USING BTREE\n) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = \'用户信息\' ROW_FORMAT = Dynamic;\n\n```\n\n###  4.2 创建实体类 \n\n> 当实体类名与数据库表名不一致时需要使用@Table注解指定表名 @Table(name =\"users\" )\n>\n> 当实体类属性名与数据库表字段名不一致时,比如 数据库字段:userNo  实体类属性：userId, 需要使用@Column(name=\"userNo\")\n>\n> 一致的情况：\n>\n> ​				数据库字段             实体类属性\n>\n> ​                 user_id                    userId\n>\n> ​                 userId                       userId   \n>\n> 使用@Id指定表主键对应的数据库属性                \n\n```java\n@Data\npublic class User {\n    @Id\n    private Integer userId;\n    private String username;\n    private String password;\n    private String nickname;\n    private String realname;\n    private String userImg;\n    private String userPhone;\n    private String userEmail;\n    private String userSex;\n    private Date userBirthday;\n    private Date userCreatetime;\n    private Date userModtime;\n}\n```\n\n###  4.3 创建DAO接口 \n\n>  tkMapper已经完成了对单表的通用操作的封装，封装在Mapper接口和MySqlMapper接口；因此如果我们要完成对单表的操作，只需自定义DAO接口继承Mapper接口和MySqlMapper接口即可\n\n```java\npublic interface UserMapper extends Mapper<User>, MySqlMapper<User> {\n}\n```\n\n### 4.4 测试 \n\n```java\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes = TkmapperDemoApplication.class)\npublic class UserDAOTest {\n\n    @Autowired\n    private UserMapper userMapper;\n    \n	@Test\n    public void test(){\n        User user = new User();\n        user.setUsername(\"lisi\");\n        user.setPassword(\"123\");\n        user.setUserImg(\"img/touxiang.png\");\n        ..\n        user.setUserRegtime(new Date());\n        user.setUserModtime(new Date());\n        int row = userMapper.insert(user);\n        System.out.println(row);\n    }\n}    \n```\n\n## 五、 tkMapper常用方法\n\n```java\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes = TkmapperDemoApplication.class)\npublic class CategoryDAOTest {\n    @Autowired\n    private CategoryDAO categoryDAO;\n    @Test\n    public void testInsert(){\n        Category category = new Category(0,\"测试类别1\",1,0);\n        //int i = categoryDAO.insert(category);\n        int i = categoryDAO.insertUseGeneratedKeys(category);\n        System.out.println(category.getCategoryId());\n        assertEquals(1,i);\n    }\n    \n    @Test\n    public void testUpdate(){\n        Category category = new Category(70,\"测试类别2\",1,0);\n        int i = categoryDAO.updateByPrimaryKey(category);\n        // 根据自定义条件修改，Example example就是封装条件的\n        // int i1 = categoryDAO.updateByExample( Example example);\n        assertEquals(1,i);\n    }\n    \n    @Test\n    public void testDelete(){\n        int i = categoryDAO.deleteByPrimaryKey(70);\n        // 根据条件删除\n        //int i1 = categoryDAO.deleteByExample(Example example);\n        assertEquals(1,i);\n    } \n    \n    @Test\n    public void testSelect1(){\n    //查询所有\n    List<Category> categories = categoryDAO.selectAll();\n        for (Category category: categories) {\n        System.out.println(category);\n        }\n    }\n    \n    @Test\n    public void testSelect2(){\n        //根据主键查询\n        Category category = categoryDAO.selectByPrimaryKey(66);\n        System.out.println(category);\n    }\n    \n    @Test\n    public void testSelect3(){\n        //条件查询\n        //1.创建一个Example封装 类别Category查询条件\n        Example example = new Example(Category.class);\n        Example.Criteria criteria = example.createCriteria();\n        criteria.andEqualTo(\"categoryLevel\",1);\n        criteria.orLike(\"categoryName\",\"%化%\");\n        List<Category> categories = categoryDAO.selectByExample(example);\n        for (Category category: categories) {\n       	 System.out.println(category);\n        }\n    }\n    \n    @Test\n    public void testSelect4(){\n        //分⻚查询\n        int pageNum = 2;\n        int pageSize = 10;\n        int start = (pageNum-1)*pageSize;\n        RowBounds rowBounds = new RowBounds(start,pageSize);\n        List<Category> categories = categoryDAO.selectByRowBounds(new Category(), rowBounds);\n        for (Category category: categories) {\n        	System.out.println(category);\n        }\n        //查询总记录数\n        int i = categoryDAO.selectCount(new Category());\n        System.out.println(i);\n    }\n    @Test\n    public void testSelect5(){\n        //带条件分⻚\n        //条件\n        Example example = new Example(Category.class);\n        Example.Criteria criteria = example.createCriteria();\n        criteria.andEqualTo(\"categoryLevel\",1);\n        //分⻚\n        int pageNum = 2;\n        int pageSize = 3;\n        int start = (pageNum-1)*pageSize;\n        RowBounds rowBounds = new RowBounds(start,pageSize);\n        List<Category> categories = categoryDAO.selectByExampleAndRowBounds(example,rowBounds);\n        for (Category category: categories) {\n        System.out.println(category);\n        }\n        //查询总记录数（满足条件）\n        int i = categoryDAO.selectCountByExample(example);\n        System.out.println(i);\n    }\n}\n```\n\n## 六、 tkMapper是如何进行关联查询 \n\n###  6.1 所有的关联查询都可以通过多个单表操作实现 \n\n```java\n//查询用户同时查询订单\nExample example = new Example(User.class);\nExample.Criteria criteria = example.createCriteria();\ncriteria.andEqualTo(\"username\",\"zhangsan\");\n//根据用户名查询用户\n//1.先根据用户名查询用户信息\nList<User> users = userDAO.selectByExample(example);\nUser user = users.get(0);\n//2.再根据用户id到订单表查询订单\nExample example1 = new Example(Orders.class);\nExample.Criteria criteria1 = example1.createCriteria();\ncriteria1.andEqualTo(\"userId\",user.getUserId());\nList<Orders> ordersList = orderDAO.selectByExample(example1);\n//3.将查询到订单集合设置到user\nuser.setOrdersList(ordersList);\nSystem.out.println(user);\n```\n\n###  6.2 自定义连接查询 \n\n>  在使用tkMapper,DAO继承Mapper和MySqlMapper之后，还可以自定义查询 \n\n省略\n\n## 7、逆向工程\n\n>  逆向工程，根据创建好的数据表，生成实体类、DAO、映射文件 \n>\n> mybatis、mybatis-plus均有逆向工程的操作\n\n###  7.1 添加逆向工程依赖 \n\n>  依赖是一个mybatis的maven插件 \n\n```xml\n<plugin>\n <groupId>org.mybatis.generator</groupId>\n    <artifactId>mybatis-generator-maven-plugin</artifactId>\n  <version>1.3.7</version>\n\n<dependencies>\n    <dependency>\n        <groupId>mysql</groupId>\n        <artifactId>mysql-connector-java</artifactId>\n        <version>8.0.26</version>\n    </dependency>\n\n    <dependency>\n        <groupId>tk.mybatis</groupId>\n        <artifactId>mapper</artifactId>\n        <version>4.1.5</version>\n    </dependency>\n</dependencies>\n</plugin>\n```\n\n###  7.2 逆向工程配置 \n\n-  在resources/utils目录下创建generatorConfig.xml \n\n  ```xml\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <!DOCTYPE generatorConfiguration\n          PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n          \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n  <generatorConfiguration>\n      <!-- 引入数据库连接配置 -->\n      <!-- <properties resource=\"jdbc.properties\"/>-->\n      <context id=\"Mysql\" targetRuntime=\"MyBatis3Simple\" defaultModelType=\"flat\">\n          <property name=\"beginningDelimiter\" value=\"`\"/>\n          <property name=\"endingDelimiter\" value=\"`\"/>\n          <!-- 配置 BaseMapper -->\n          <plugin type=\"tk.mybatis.mapper.generator.MapperPlugin\">\n              <property name=\"mappers\" value=\"com.neuedu.demo.utils.BaseMapper\"/>\n          </plugin>\n          <!-- 配置数据库连接 -->\n          <jdbcConnection driverClass=\"com.mysql.cj.jdbc.Driver\"\n                          connectionURL=\"jdbc:mysql://localhost:3306/mall?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai\"\n                          userId=\"root\" password=\"root\">\n              <!--解决映射文件出现重复多余字段-->\n              <!--<property name=\"nullCatalogMeansCurrent\" value=\"true\"/>-->\n          </jdbcConnection>\n          <!-- 配置实体类存放路径 -->\n          <javaModelGenerator targetPackage=\"com.neuedu.demo.pojo\"\n                              targetProject=\"src/main/java\"/>\n          <!-- 配置 XML 存放路径 -->\n          <sqlMapGenerator targetPackage=\"/\" targetProject=\"src/main/resources/mappers\"/>\n          <!-- 配置 DAO 存放路径 -->\n          <javaClientGenerator targetPackage=\"com.neuedu.demo.dao\"\n                               targetProject=\"src/main/java\" type=\"XMLMAPPER\"/>\n  \n          <!-- 配置需要指定生成的数据库和表，% 代表所有表 -->\n          <!-- tableName指定表名，domainObjectName指定表对应的JavaBean名 -->\n          <!--<table tableName=\"%\">-->\n              <!--&lt;!&ndash; mysql 配置 &ndash;&gt;-->\n              <!--&lt;!&ndash; <generatedKey column=\"id\" sqlStatement=\"Mysql\" identity=\"true\"/>&ndash;&gt;-->\n          <!--</table>-->\n          <!--<table tableName=\"employees\" domainObjectName=\"Employee\"-->\n                 <!--enableCountByExample=\"false\" enableUpdateByExample=\"true\"-->\n                 <!--enableDeleteByExample=\"false\" enableSelectByExample=\"true\"-->\n                 <!--selectByExampleQueryId=\"false\">-->\n          <!--</table>-->\n          <!-- <table tableName=\"tb_roles\">-->\n          <!-- &lt;!&ndash; mysql 配置 &ndash;&gt;-->\n          <!-- <generatedKey column=\"roleid\" sqlStatement=\"Mysql\" identity=\"true\"/>-->\n          <!-- </table>-->\n          <!-- <table tableName=\"tb_permissions\">-->\n          <!-- &lt;!&ndash; mysql 配置 &ndash;&gt;-->\n          <!-- <generatedKey column=\"perid\" sqlStatement=\"Mysql\" identity=\"true\"/>-->\n          <!-- </table>-->\n          <table tableName=\"users\"> </table>\n          <table tableName=\"user_login_history\"> </table>\n          <table tableName=\"user_address\"> </table>\n          <table tableName=\"slideshow_img\"> </table>\n          <table tableName=\"product_spu\"> </table>\n          <table tableName=\"product_sku\"> </table>\n          <table tableName=\"product_params\"> </table>\n          <table tableName=\"product_img\"> </table>\n          <table tableName=\"product_comments\"> </table>\n          <table tableName=\"product_cart\"> </table>\n          <table tableName=\"orders\"> </table>\n          <table tableName=\"order_item\"> </table>\n          <table tableName=\"category\"> </table>\n      </context>\n  </generatorConfiguration>\n  ```\n\n###  7.3 将配置文件设置到逆向工程的maven插件 \n\n![1669985484937](images/1669985484937.png)\n\n###  7.4 执行逆向生成 \n\n![1669835651329](images/1669835651329.png)', '<h2><a id=\"DAO_0\"></a>一、DAO层开发的规律</h2>\n<h3><a id=\"11__2\"></a>1.1 实体类与数据库表的规律</h3>\n<ul>\n<li>实体类名与数据库表名对应</li>\n<li>实体类属性数据类型与数据库表字段类型对应</li>\n<li>实体类属性名与数据库表字段名对应</li>\n</ul>\n<blockquote>\n<p>结论： 实体类与数据表存在对应关系，并且是有规律的——只要知道了数据表的结构，就能够生成实体类；</p>\n</blockquote>\n<h3><a id=\"12__DAO_10\"></a>1.2  DAO层接口的规律</h3>\n<blockquote>\n<p>所有实体的DAO接口中定义的方法也是有规律的，不同点就是实体类型不同</p>\n</blockquote>\n<ul>\n<li>\n<p>BaseMapper</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">BaseMapper</span>&lt;T&gt;{\n    <span class=\"hljs-comment\">//通用方法</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">insertMessage</span><span class=\"hljs-params\">(T t)</span>;\n    <span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title function_\">queryOneBykey</span><span class=\"hljs-params\">(Integer key)</span>\n}\n</code></div></pre>\n</li>\n<li>\n<p>UserMapper</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserMapper</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">BaseMapper</span>&lt;User&gt;{\n	\n}\n</code></div></pre>\n</li>\n<li>\n<p>GoodsMapper</p>\n</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">GoodsMapper</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">BaseMapper</span>&lt;Goods&gt;{\n	\n}\n</code></div></pre>\n<h3><a id=\"13_DAOmapper_40\"></a>1.3 DAO层mapper映射文件的规律</h3>\n<blockquote>\n<p>对于BaseMapper接口定义的数据库操作方法因为使用了泛型， 无需映射文件 ；对于UserMapper和GoodsMapper需要映射文件，所有DAO的相同操作的映射文件是有规律可循的</p>\n</blockquote>\n<ul>\n<li>\n<p>UserMapper.xml</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">insert</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;insertMessage&quot;</span> <span class=\"hljs-attr\">paramterType</span>=<span class=\"hljs-string\">&quot;User&quot;</span>&gt;</span>\n	insert into users(user_id,username) values(#{userId},#{username})\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">insert</span>&gt;</span>\n</code></div></pre>\n</li>\n<li>\n<p>GoodsMapper.xml</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">insert</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;insertMessage&quot;</span> <span class=\"hljs-attr\">paramterType</span>=<span class=\"hljs-string\">&quot;Goods&quot;</span>&gt;</span>\n	insert into users(goods_id,goods_name) values(#{goodsId},#{goodsName})\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">insert</span>&gt;</span>\n</code></div></pre>\n</li>\n</ul>\n<blockquote>\n<p>配置规则：根据实体类与数据库表的映射关系，反射创建实体</p>\n</blockquote>\n<ul>\n<li>\n<p>User</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@Table(&quot;users&quot;)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span>{\n\n    <span class=\"hljs-meta\">@Id</span>\n    <span class=\"hljs-meta\">@Column(&quot;user_id&quot;)</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> userId;\n    \n    <span class=\"hljs-meta\">@Column(&quot;username&quot;)</span>\n    <span class=\"hljs-keyword\">private</span> String username;\n}\n</code></div></pre>\n</li>\n<li>\n<p>Goods</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@Table(&quot;product&quot;)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Goods</span>{\n\n    <span class=\"hljs-meta\">@Id</span>\n    <span class=\"hljs-meta\">@Column(&quot;goods_id&quot;)</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> goodsId;\n    \n    <span class=\"hljs-meta\">@Column(&quot;goods_name&quot;)</span>\n    <span class=\"hljs-keyword\">private</span> String goodsNam\n}\n</code></div></pre>\n</li>\n</ul>\n<h2><a id=\"tkMapper_92\"></a>二、tkMapper简介</h2>\n<blockquote>\n<p>基于MyBatis提供了很多第三方插件，这些插件通常可以完成数据操作方法的封装（BaseMapper）、数据库逆向工程工作(根据数据表生成实体类、生成映射文件)<br />\nMyBatis-plus<br />\ntkMapper</p>\n</blockquote>\n<p>tkMapper就是一个MyBatis插件，是在MyBatis的基础上提供了很多工具，在mybatis原来的基础上只做增强不做修改，让开发变得简单，提高开发效率</p>\n<ul>\n<li>提供了针对单表通用的数据库操作方法,联合查询需要用原有的mybatis方式或者其他方式</li>\n<li>逆向工程（根据数据表生成实体类、dao接口、映射文件）</li>\n</ul>\n<h2><a id=\"tkMapper_103\"></a>三、tkMapper的整合</h2>\n<h3><a id=\"31_SpringBootMyBatis_105\"></a>3.1 基于SpringBoot完成MyBatis的整</h3>\n<pre><div class=\"hljs\"><code class=\"lang-yml\"><span class=\"hljs-attr\">spring:</span>\n  <span class=\"hljs-attr\">datasource:</span>\n    <span class=\"hljs-attr\">druid:</span>\n      <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">jdbc:mysql://localhost:3306/xxx?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span>\n      <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">root</span>\n      <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">root</span>\n      <span class=\"hljs-attr\">driver-class-name:</span> <span class=\"hljs-string\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"hljs-comment\"># mybatis配置</span>\n<span class=\"hljs-attr\">mybatis:</span>\n  <span class=\"hljs-attr\">mapper-locations:</span> <span class=\"hljs-string\">classpath:mappers/*Mapper.xml</span>\n  <span class=\"hljs-attr\">type-aliases-package:</span> <span class=\"hljs-string\">com.neuedu.tkmapperdemo.pojo</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-comment\">&lt;!--mybatis-spring-boot--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.2.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>mysql<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>8.0.26<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>druid-spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.2.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></div></pre>\n<h3><a id=\"32_tkMapper_140\"></a>3.2 整合tkMapper</h3>\n<h4><a id=\"321_tkMapper_142\"></a>3.2.1 添加tkMapper的依赖</h4>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>tk.mybatis<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.1.5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></div></pre>\n<p>3.2.2 修改启动类的<code> @MapperScan</code> 注解的包 为<code>tk.mybatis.spring.annotation.MapperScan</code></p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">import</span> tk.mybatis.spring.annotation.MapperScan;\n\n<span class=\"hljs-meta\">@SpringBootApplication</span>\n<span class=\"hljs-meta\">@MapperScan(&quot;com.neuedu.tkmapperdemo.dao&quot;)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TkmapperDemoApplication</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    SpringApplication.run(TkmapperDemoApplication.class, args);\n}\n}\n</code></div></pre>\n<h2><a id=\"tkMapper_167\"></a>四、tkMapper的使用</h2>\n<h3><a id=\"41__169\"></a>4.1 创建数据表</h3>\n<pre><div class=\"hljs\"><code class=\"lang-sql\"><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> IF <span class=\"hljs-keyword\">EXISTS</span> `users`;\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `users`  (\n`user_id` <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"hljs-string\">&#x27;主键id;用户id&#x27;</span>,\n`username` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;用户名;用户名&#x27;</span>,\n`password` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">64</span>) <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;密码;密码&#x27;</span>,\n`nickname` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">1024</span>) <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;昵称;昵称&#x27;</span>,\n`realname` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">90</span>) <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;真实姓名;真实姓名&#x27;</span>,\n`user_img` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;头像;头像&#x27;</span>,\n`user_phone` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;手机号;手机号&#x27;</span>,\n`user_email` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;邮箱地址;邮箱地址&#x27;</span>,\n`user_sex` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">1</span>) <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;性别:M(男) or F(女);M(男) or F(女)&#x27;</span>,\n`user_birthday` datetime(<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;生日;生日&#x27;</span>,\n`user_createtime` datetime(<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;注册时间;创建时间&#x27;</span>,\n`user_modtime` datetime(<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;更新时间;更新时间&#x27;</span>,\n<span class=\"hljs-keyword\">PRIMARY</span> KEY (`user_id`) <span class=\"hljs-keyword\">USING</span> BTREE,\n<span class=\"hljs-keyword\">UNIQUE</span> INDEX `username`(`username`) <span class=\"hljs-keyword\">USING</span> BTREE\n) ENGINE <span class=\"hljs-operator\">=</span> InnoDB <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> <span class=\"hljs-operator\">=</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> <span class=\"hljs-operator\">=</span> utf8_general_ci COMMENT <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;用户信息&#x27;</span> ROW_FORMAT <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">Dynamic</span>;\n\n</code></div></pre>\n<h3><a id=\"42__192\"></a>4.2 创建实体类</h3>\n<blockquote>\n<p>当实体类名与数据库表名不一致时需要使用@Table注解指定表名 @Table(name =“users” )</p>\n<p>当实体类属性名与数据库表字段名不一致时,比如 数据库字段:userNo  实体类属性：userId, 需要使用@Column(name=“userNo”)</p>\n<p>一致的情况：</p>\n<p>​				数据库字段             实体类属性</p>\n<p>​                 user_id                    userId</p>\n<p>​                 userId                       userId</p>\n<p>使用@Id指定表主键对应的数据库属性</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span> {\n    <span class=\"hljs-meta\">@Id</span>\n    <span class=\"hljs-keyword\">private</span> Integer userId;\n    <span class=\"hljs-keyword\">private</span> String username;\n    <span class=\"hljs-keyword\">private</span> String password;\n    <span class=\"hljs-keyword\">private</span> String nickname;\n    <span class=\"hljs-keyword\">private</span> String realname;\n    <span class=\"hljs-keyword\">private</span> String userImg;\n    <span class=\"hljs-keyword\">private</span> String userPhone;\n    <span class=\"hljs-keyword\">private</span> String userEmail;\n    <span class=\"hljs-keyword\">private</span> String userSex;\n    <span class=\"hljs-keyword\">private</span> Date userBirthday;\n    <span class=\"hljs-keyword\">private</span> Date userCreatetime;\n    <span class=\"hljs-keyword\">private</span> Date userModtime;\n}\n</code></div></pre>\n<h3><a id=\"43_DAO_227\"></a>4.3 创建DAO接口</h3>\n<blockquote>\n<p>tkMapper已经完成了对单表的通用操作的封装，封装在Mapper接口和MySqlMapper接口；因此如果我们要完成对单表的操作，只需自定义DAO接口继承Mapper接口和MySqlMapper接口即可</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserMapper</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Mapper</span>&lt;User&gt;, MySqlMapper&lt;User&gt; {\n}\n</code></div></pre>\n<h3><a id=\"44__236\"></a>4.4 测试</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@RunWith(SpringRunner.class)</span>\n<span class=\"hljs-meta\">@SpringBootTest(classes = TkmapperDemoApplication.class)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserDAOTest</span> {\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> UserMapper userMapper;\n    \n	<span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>{\n        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>();\n        user.setUsername(<span class=\"hljs-string\">&quot;lisi&quot;</span>);\n        user.setPassword(<span class=\"hljs-string\">&quot;123&quot;</span>);\n        user.setUserImg(<span class=\"hljs-string\">&quot;img/touxiang.png&quot;</span>);\n        ..\n        user.setUserRegtime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());\n        user.setUserModtime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">row</span> <span class=\"hljs-operator\">=</span> userMapper.insert(user);\n        System.out.println(row);\n    }\n}    \n</code></div></pre>\n<h2><a id=\"_tkMapper_261\"></a>五、 tkMapper常用方法</h2>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@RunWith(SpringRunner.class)</span>\n<span class=\"hljs-meta\">@SpringBootTest(classes = TkmapperDemoApplication.class)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CategoryDAOTest</span> {\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> CategoryDAO categoryDAO;\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testInsert</span><span class=\"hljs-params\">()</span>{\n        <span class=\"hljs-type\">Category</span> <span class=\"hljs-variable\">category</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Category</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">&quot;测试类别1&quot;</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-comment\">//int i = categoryDAO.insert(category);</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> categoryDAO.insertUseGeneratedKeys(category);\n        System.out.println(category.getCategoryId());\n        assertEquals(<span class=\"hljs-number\">1</span>,i);\n    }\n    \n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUpdate</span><span class=\"hljs-params\">()</span>{\n        <span class=\"hljs-type\">Category</span> <span class=\"hljs-variable\">category</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Category</span>(<span class=\"hljs-number\">70</span>,<span class=\"hljs-string\">&quot;测试类别2&quot;</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> categoryDAO.updateByPrimaryKey(category);\n        <span class=\"hljs-comment\">// 根据自定义条件修改，Example example就是封装条件的</span>\n        <span class=\"hljs-comment\">// int i1 = categoryDAO.updateByExample( Example example);</span>\n        assertEquals(<span class=\"hljs-number\">1</span>,i);\n    }\n    \n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testDelete</span><span class=\"hljs-params\">()</span>{\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> categoryDAO.deleteByPrimaryKey(<span class=\"hljs-number\">70</span>);\n        <span class=\"hljs-comment\">// 根据条件删除</span>\n        <span class=\"hljs-comment\">//int i1 = categoryDAO.deleteByExample(Example example);</span>\n        assertEquals(<span class=\"hljs-number\">1</span>,i);\n    } \n    \n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testSelect1</span><span class=\"hljs-params\">()</span>{\n    <span class=\"hljs-comment\">//查询所有</span>\n    List&lt;Category&gt; categories = categoryDAO.selectAll();\n        <span class=\"hljs-keyword\">for</span> (Category category: categories) {\n        System.out.println(category);\n        }\n    }\n    \n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testSelect2</span><span class=\"hljs-params\">()</span>{\n        <span class=\"hljs-comment\">//根据主键查询</span>\n        <span class=\"hljs-type\">Category</span> <span class=\"hljs-variable\">category</span> <span class=\"hljs-operator\">=</span> categoryDAO.selectByPrimaryKey(<span class=\"hljs-number\">66</span>);\n        System.out.println(category);\n    }\n    \n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testSelect3</span><span class=\"hljs-params\">()</span>{\n        <span class=\"hljs-comment\">//条件查询</span>\n        <span class=\"hljs-comment\">//1.创建一个Example封装 类别Category查询条件</span>\n        <span class=\"hljs-type\">Example</span> <span class=\"hljs-variable\">example</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Example</span>(Category.class);\n        Example.<span class=\"hljs-type\">Criteria</span> <span class=\"hljs-variable\">criteria</span> <span class=\"hljs-operator\">=</span> example.createCriteria();\n        criteria.andEqualTo(<span class=\"hljs-string\">&quot;categoryLevel&quot;</span>,<span class=\"hljs-number\">1</span>);\n        criteria.orLike(<span class=\"hljs-string\">&quot;categoryName&quot;</span>,<span class=\"hljs-string\">&quot;%化%&quot;</span>);\n        List&lt;Category&gt; categories = categoryDAO.selectByExample(example);\n        <span class=\"hljs-keyword\">for</span> (Category category: categories) {\n       	 System.out.println(category);\n        }\n    }\n    \n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testSelect4</span><span class=\"hljs-params\">()</span>{\n        <span class=\"hljs-comment\">//分⻚查询</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">pageNum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">pageSize</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">start</span> <span class=\"hljs-operator\">=</span> (pageNum-<span class=\"hljs-number\">1</span>)*pageSize;\n        <span class=\"hljs-type\">RowBounds</span> <span class=\"hljs-variable\">rowBounds</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RowBounds</span>(start,pageSize);\n        List&lt;Category&gt; categories = categoryDAO.selectByRowBounds(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Category</span>(), rowBounds);\n        <span class=\"hljs-keyword\">for</span> (Category category: categories) {\n        	System.out.println(category);\n        }\n        <span class=\"hljs-comment\">//查询总记录数</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> categoryDAO.selectCount(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Category</span>());\n        System.out.println(i);\n    }\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testSelect5</span><span class=\"hljs-params\">()</span>{\n        <span class=\"hljs-comment\">//带条件分⻚</span>\n        <span class=\"hljs-comment\">//条件</span>\n        <span class=\"hljs-type\">Example</span> <span class=\"hljs-variable\">example</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Example</span>(Category.class);\n        Example.<span class=\"hljs-type\">Criteria</span> <span class=\"hljs-variable\">criteria</span> <span class=\"hljs-operator\">=</span> example.createCriteria();\n        criteria.andEqualTo(<span class=\"hljs-string\">&quot;categoryLevel&quot;</span>,<span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-comment\">//分⻚</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">pageNum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">pageSize</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">3</span>;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">start</span> <span class=\"hljs-operator\">=</span> (pageNum-<span class=\"hljs-number\">1</span>)*pageSize;\n        <span class=\"hljs-type\">RowBounds</span> <span class=\"hljs-variable\">rowBounds</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RowBounds</span>(start,pageSize);\n        List&lt;Category&gt; categories = categoryDAO.selectByExampleAndRowBounds(example,rowBounds);\n        <span class=\"hljs-keyword\">for</span> (Category category: categories) {\n        System.out.println(category);\n        }\n        <span class=\"hljs-comment\">//查询总记录数（满足条件）</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> categoryDAO.selectCountByExample(example);\n        System.out.println(i);\n    }\n}\n</code></div></pre>\n<h2><a id=\"_tkMapper_363\"></a>六、 tkMapper是如何进行关联查询</h2>\n<h3><a id=\"61__365\"></a>6.1 所有的关联查询都可以通过多个单表操作实现</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">//查询用户同时查询订单</span>\n<span class=\"hljs-type\">Example</span> <span class=\"hljs-variable\">example</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Example</span>(User.class);\nExample.<span class=\"hljs-type\">Criteria</span> <span class=\"hljs-variable\">criteria</span> <span class=\"hljs-operator\">=</span> example.createCriteria();\ncriteria.andEqualTo(<span class=\"hljs-string\">&quot;username&quot;</span>,<span class=\"hljs-string\">&quot;zhangsan&quot;</span>);\n<span class=\"hljs-comment\">//根据用户名查询用户</span>\n<span class=\"hljs-comment\">//1.先根据用户名查询用户信息</span>\nList&lt;User&gt; users = userDAO.selectByExample(example);\n<span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> users.get(<span class=\"hljs-number\">0</span>);\n<span class=\"hljs-comment\">//2.再根据用户id到订单表查询订单</span>\n<span class=\"hljs-type\">Example</span> <span class=\"hljs-variable\">example1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Example</span>(Orders.class);\nExample.<span class=\"hljs-type\">Criteria</span> <span class=\"hljs-variable\">criteria1</span> <span class=\"hljs-operator\">=</span> example1.createCriteria();\ncriteria1.andEqualTo(<span class=\"hljs-string\">&quot;userId&quot;</span>,user.getUserId());\nList&lt;Orders&gt; ordersList = orderDAO.selectByExample(example1);\n<span class=\"hljs-comment\">//3.将查询到订单集合设置到user</span>\nuser.setOrdersList(ordersList);\nSystem.out.println(user);\n</code></div></pre>\n<h3><a id=\"62__386\"></a>6.2 自定义连接查询</h3>\n<blockquote>\n<p>在使用tkMapper,DAO继承Mapper和MySqlMapper之后，还可以自定义查询</p>\n</blockquote>\n<p>省略</p>\n<h2><a id=\"7_392\"></a>7、逆向工程</h2>\n<blockquote>\n<p>逆向工程，根据创建好的数据表，生成实体类、DAO、映射文件</p>\n<p>mybatis、mybatis-plus均有逆向工程的操作</p>\n</blockquote>\n<h3><a id=\"71__398\"></a>7.1 添加逆向工程依赖</h3>\n<blockquote>\n<p>依赖是一个mybatis的maven插件</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.3.7<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>mysql<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>8.0.26<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>tk.mybatis<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mapper<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.1.5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n</code></div></pre>\n<h3><a id=\"72__424\"></a>7.2 逆向工程配置</h3>\n<ul>\n<li>在resources/utils目录下创建generatorConfig.xml</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>\n<span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">generatorConfiguration</span>\n        <span class=\"hljs-keyword\">PUBLIC</span> <span class=\"hljs-string\">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span>\n        <span class=\"hljs-string\">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">generatorConfiguration</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- 引入数据库连接配置 --&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- &lt;properties resource=&quot;jdbc.properties&quot;/&gt;--&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;Mysql&quot;</span> <span class=\"hljs-attr\">targetRuntime</span>=<span class=\"hljs-string\">&quot;MyBatis3Simple&quot;</span> <span class=\"hljs-attr\">defaultModelType</span>=<span class=\"hljs-string\">&quot;flat&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;beginningDelimiter&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;`&quot;</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;endingDelimiter&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;`&quot;</span>/&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 配置 BaseMapper --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;tk.mybatis.mapper.generator.MapperPlugin&quot;</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;mappers&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;com.neuedu.demo.utils.BaseMapper&quot;</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 配置数据库连接 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">jdbcConnection</span> <span class=\"hljs-attr\">driverClass</span>=<span class=\"hljs-string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>\n                        <span class=\"hljs-attr\">connectionURL</span>=<span class=\"hljs-string\">&quot;jdbc:mysql://localhost:3306/mall?useSSL=false<span class=\"hljs-symbol\">&amp;amp;</span>useUnicode=true<span class=\"hljs-symbol\">&amp;amp;</span>characterEncoding=UTF-8<span class=\"hljs-symbol\">&amp;amp;</span>serverTimezone=Asia/Shanghai&quot;</span>\n                        <span class=\"hljs-attr\">userId</span>=<span class=\"hljs-string\">&quot;root&quot;</span> <span class=\"hljs-attr\">password</span>=<span class=\"hljs-string\">&quot;root&quot;</span>&gt;</span>\n            <span class=\"hljs-comment\">&lt;!--解决映射文件出现重复多余字段--&gt;</span>\n            <span class=\"hljs-comment\">&lt;!--&lt;property name=&quot;nullCatalogMeansCurrent&quot; value=&quot;true&quot;/&gt;--&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">jdbcConnection</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 配置实体类存放路径 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">javaModelGenerator</span> <span class=\"hljs-attr\">targetPackage</span>=<span class=\"hljs-string\">&quot;com.neuedu.demo.pojo&quot;</span>\n                            <span class=\"hljs-attr\">targetProject</span>=<span class=\"hljs-string\">&quot;src/main/java&quot;</span>/&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 配置 XML 存放路径 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">sqlMapGenerator</span> <span class=\"hljs-attr\">targetPackage</span>=<span class=\"hljs-string\">&quot;/&quot;</span> <span class=\"hljs-attr\">targetProject</span>=<span class=\"hljs-string\">&quot;src/main/resources/mappers&quot;</span>/&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 配置 DAO 存放路径 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">javaClientGenerator</span> <span class=\"hljs-attr\">targetPackage</span>=<span class=\"hljs-string\">&quot;com.neuedu.demo.dao&quot;</span>\n                             <span class=\"hljs-attr\">targetProject</span>=<span class=\"hljs-string\">&quot;src/main/java&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;XMLMAPPER&quot;</span>/&gt;</span>\n\n        <span class=\"hljs-comment\">&lt;!-- 配置需要指定生成的数据库和表，% 代表所有表 --&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- tableName指定表名，domainObjectName指定表对应的JavaBean名 --&gt;</span>\n        <span class=\"hljs-comment\">&lt;!--&lt;table tableName=&quot;%&quot;&gt;--&gt;</span>\n            <span class=\"hljs-comment\">&lt;!--&amp;lt;!&amp;ndash; mysql 配置 &amp;ndash;&amp;gt;--&gt;</span>\n            <span class=\"hljs-comment\">&lt;!--&amp;lt;!&amp;ndash; &lt;generatedKey column=&quot;id&quot; sqlStatement=&quot;Mysql&quot; identity=&quot;true&quot;/&gt;&amp;ndash;&amp;gt;--&gt;</span>\n        <span class=\"hljs-comment\">&lt;!--&lt;/table&gt;--&gt;</span>\n        <span class=\"hljs-comment\">&lt;!--&lt;table tableName=&quot;employees&quot; domainObjectName=&quot;Employee&quot;--&gt;</span>\n               <span class=\"hljs-comment\">&lt;!--enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;true&quot;--&gt;</span>\n               <span class=\"hljs-comment\">&lt;!--enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;true&quot;--&gt;</span>\n               <span class=\"hljs-comment\">&lt;!--selectByExampleQueryId=&quot;false&quot;&gt;--&gt;</span>\n        <span class=\"hljs-comment\">&lt;!--&lt;/table&gt;--&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- &lt;table tableName=&quot;tb_roles&quot;&gt;--&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- &amp;lt;!&amp;ndash; mysql 配置 &amp;ndash;&amp;gt;--&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- &lt;generatedKey column=&quot;roleid&quot; sqlStatement=&quot;Mysql&quot; identity=&quot;true&quot;/&gt;--&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- &lt;/table&gt;--&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- &lt;table tableName=&quot;tb_permissions&quot;&gt;--&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- &amp;lt;!&amp;ndash; mysql 配置 &amp;ndash;&amp;gt;--&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- &lt;generatedKey column=&quot;perid&quot; sqlStatement=&quot;Mysql&quot; identity=&quot;true&quot;/&gt;--&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- &lt;/table&gt;--&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">tableName</span>=<span class=\"hljs-string\">&quot;users&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">tableName</span>=<span class=\"hljs-string\">&quot;user_login_history&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">tableName</span>=<span class=\"hljs-string\">&quot;user_address&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">tableName</span>=<span class=\"hljs-string\">&quot;slideshow_img&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">tableName</span>=<span class=\"hljs-string\">&quot;product_spu&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">tableName</span>=<span class=\"hljs-string\">&quot;product_sku&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">tableName</span>=<span class=\"hljs-string\">&quot;product_params&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">tableName</span>=<span class=\"hljs-string\">&quot;product_img&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">tableName</span>=<span class=\"hljs-string\">&quot;product_comments&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">tableName</span>=<span class=\"hljs-string\">&quot;product_cart&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">tableName</span>=<span class=\"hljs-string\">&quot;orders&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">tableName</span>=<span class=\"hljs-string\">&quot;order_item&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">tableName</span>=<span class=\"hljs-string\">&quot;category&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">context</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">generatorConfiguration</span>&gt;</span>\n</code></div></pre>\n<h3><a id=\"73_maven_495\"></a>7.3 将配置文件设置到逆向工程的maven插件</h3>\n<p><img src=\"images/1669985484937.png\" alt=\"1669985484937\" /></p>\n<h3><a id=\"74__499\"></a>7.4 执行逆向生成</h3>\n<p><img src=\"images/1669835651329.png\" alt=\"1669835651329\" /></p>\n');
INSERT INTO `me_article_body` VALUES (41, '![greenfish_clear.png](http://localhost:8888/20230623/8855c671-d3c8-4deb-b588-890237ed2aae_greenfish_clear.png)', '<p><img src=\"http://localhost:8888/20230623/8855c671-d3c8-4deb-b588-890237ed2aae_greenfish_clear.png\" alt=\"greenfish_clear.png\" /></p>\n');
INSERT INTO `me_article_body` VALUES (42, 'Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。\n\n如果你想在深入学习 Vue 之前对它有更多了解，我们制作了一个视频，带您了解其核心概念和一个示例工程。\n如果你已经是有经验的前端开发者，想知道 Vue 与其它库/框架有哪些区别，请查看对比其它框架。\n\n# 起步\n\n> 官方指南假设你已了解关于 HTML、CSS 和 JavaScript 的中级知识。如果你刚开始学习前端开发，将框架作为你的第一步可能不是最好的主意——掌握好基础知识再来吧！之前有其它框架的使用经验会有帮助，但这不是必需的。\n\n尝试 Vue.js 最简单的方法是使用 JSFiddle 上的 Hello World 例子。你可以在浏览器新标签页中打开它，跟着例子学习一些基础用法。或者你也可以创建一个 .html 文件，然后通过如下方式引入 Vue：\n\n```javascript\n<script src=\"https://cdn.jsdelivr.net/npm/vue\"></script>\n\n```\n安装教程给出了更多安装 Vue 的方式。请注意我们不推荐新手直接使用 vue-cli，尤其是在你还不熟悉基于 Node.js 的构建工具时。\n\n# 声明式渲染\nVue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统：\n```javascript\n<div id=\"app\">\n  {{ message }}\n</div>\n\n```\n```javascript\nvar app = new Vue({\n  el: \'#app\',\n  data: {\n    message: \'Hello Vue!\'\n  }\n})\n\n```\n我们已经成功创建了第一个 Vue 应用！看起来这跟渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。现在数据和 DOM 已经被建立了关联，所有东西都是响应式的。我们要怎么确认呢？打开你的浏览器的 JavaScript 控制台 (就在这个页面打开)，并修改 app.message 的值，你将看到上例相应地更新。\n\n除了文本插值，我们还可以像这样来绑定元素特性：\n\n\n\n\n\n\n', '<p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>\n<p>如果你想在深入学习 Vue 之前对它有更多了解，我们制作了一个视频，带您了解其核心概念和一个示例工程。<br />\n如果你已经是有经验的前端开发者，想知道 Vue 与其它库/框架有哪些区别，请查看对比其它框架。</p>\n<h1><a id=\"_5\"></a>起步</h1>\n<blockquote>\n<p>官方指南假设你已了解关于 HTML、CSS 和 JavaScript 的中级知识。如果你刚开始学习前端开发，将框架作为你的第一步可能不是最好的主意——掌握好基础知识再来吧！之前有其它框架的使用经验会有帮助，但这不是必需的。</p>\n</blockquote>\n<p>尝试 Vue.js 最简单的方法是使用 JSFiddle 上的 Hello World 例子。你可以在浏览器新标签页中打开它，跟着例子学习一些基础用法。或者你也可以创建一个 .html 文件，然后通过如下方式引入 Vue：</p>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">&lt;script src=<span class=\"hljs-string\">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;&lt;/script&gt;\n\n</code></div></pre>\n<p>安装教程给出了更多安装 Vue 的方式。请注意我们不推荐新手直接使用 vue-cli，尤其是在你还不熟悉基于 Node.js 的构建工具时。</p>\n<h1><a id=\"_17\"></a>声明式渲染</h1>\n<p>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统：</p>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">&lt;div id=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;\n  {{ message }}\n&lt;/div&gt;\n\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>({\n  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,\n  <span class=\"hljs-attr\">data</span>: {\n    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;Hello Vue!&#x27;</span>\n  }\n})\n\n</code></div></pre>\n<p>我们已经成功创建了第一个 Vue 应用！看起来这跟渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。现在数据和 DOM 已经被建立了关联，所有东西都是响应式的。我们要怎么确认呢？打开你的浏览器的 JavaScript 控制台 (就在这个页面打开)，并修改 app.message 的值，你将看到上例相应地更新。</p>\n<p>除了文本插值，我们还可以像这样来绑定元素特性：</p>\n');
INSERT INTO `me_article_body` VALUES (43, '@ 是的分红', '<p>@ 是的分红</p>\n');
INSERT INTO `me_article_body` VALUES (44, '# Hi, here!\n', '<h1><a id=\"Hi_here_0\"></a>Hi, here!</h1>\n');
INSERT INTO `me_article_body` VALUES (45, '<img src=\"./images/fish_clear.png\" alt=\"whitefish_clear\" align=\"middle\" />\n\n# Hi, here!\n\n![iFishin\'s GitHub stats](https://github-readme-stats.vercel.app/api?username=ifishin&show_icons=true&theme=tokyonight)\n\n![Top Langs](https://github-readme-stats.vercel.app/api/top-langs/?username=ifishin&layout=compact&theme=tokyonight)\n\n\n\n<!--START_SECTION:waka-->\n\n```txt\nNo activity tracked\n```\n\n<!--END_SECTION:waka-->\n\n~~~console\n ______      ________      ______       ______       __    __      ______      __    __       ______  \n|      \\    |        \\    |      \\     /      \\     |  \\  |  \\    |      \\    |  \\  |  \\     /      \\ \n \\▓▓▓▓▓▓    | ▓▓▓▓▓▓▓▓     \\▓▓▓▓▓▓    |  ▓▓▓▓▓▓\\    | ▓▓  | ▓▓     \\▓▓▓▓▓▓    | ▓▓\\ | ▓▓    |  ▓▓▓▓▓▓\\\n  | ▓▓      | ▓▓__          | ▓▓      | ▓▓___\\▓▓    | ▓▓__| ▓▓      | ▓▓      | ▓▓▓\\| ▓▓    | ▓▓ __\\▓▓\n  | ▓▓      | ▓▓  \\         | ▓▓       \\▓▓    \\     | ▓▓    ▓▓      | ▓▓      | ▓▓▓▓\\ ▓▓    | ▓▓|    \\\n  | ▓▓      | ▓▓▓▓▓         | ▓▓       _\\▓▓▓▓▓▓\\    | ▓▓▓▓▓▓▓▓      | ▓▓      | ▓▓\\▓▓ ▓▓    | ▓▓ \\▓▓▓▓\n _| ▓▓_     | ▓▓           _| ▓▓_     |  \\__| ▓▓    | ▓▓  | ▓▓     _| ▓▓_     | ▓▓ \\▓▓▓▓    | ▓▓__| ▓▓\n|   ▓▓ \\    | ▓▓          |   ▓▓ \\     \\▓▓    ▓▓    | ▓▓  | ▓▓    |   ▓▓ \\    | ▓▓  \\▓▓▓     \\▓▓    ▓▓\n \\▓▓▓▓▓▓     \\▓▓           \\▓▓▓▓▓▓      \\▓▓▓▓▓▓      \\▓▓   \\▓▓     \\▓▓▓▓▓▓     \\▓▓   \\▓▓      \\▓▓▓▓▓▓ \n                                                                                                      \n                                                                                                      \n                                                                                                      \n~~~\n[![Ashutosh\'s github activity graph](https://github-readme-activity-graph.vercel.app/graph?username=Ashutosh00710&theme=react)](https://github.com/ashutosh00710/github-readme-activity-graph)\n', '<img src alt=\"whitefish_clear\" />\n<h1><a id=\"Hi_here_2\"></a>Hi, here!</h1>\n<p><img src=\"https://github-readme-stats.vercel.app/api?username=ifishin&amp;show_icons=true&amp;theme=tokyonight\" alt=\"iFishin\'s GitHub stats\" /></p>\n<p><img src=\"https://github-readme-stats.vercel.app/api/top-langs/?username=ifishin&amp;layout=compact&amp;theme=tokyonight\" alt=\"Top Langs\" /></p>\n\n<pre><div class=\"hljs\"><code class=\"lang-txt\">No activity tracked\n</code></div></pre>\n\n<pre><div class=\"hljs\"><code class=\"lang-console\"> ______      ________      ______       ______       __    __      ______      __    __       ______  \n|      \\    |        \\    |      \\     /      \\     |  \\  |  \\    |      \\    |  \\  |  \\     /      \\ \n \\▓▓▓▓▓▓    | ▓▓▓▓▓▓▓▓     \\▓▓▓▓▓▓    |  ▓▓▓▓▓▓\\    | ▓▓  | ▓▓     \\▓▓▓▓▓▓    | ▓▓\\ | ▓▓    |  ▓▓▓▓▓▓\\\n  | ▓▓      | ▓▓__          | ▓▓      | ▓▓___\\▓▓    | ▓▓__| ▓▓      | ▓▓      | ▓▓▓\\| ▓▓    | ▓▓ __\\▓▓\n  | ▓▓      | ▓▓  \\         | ▓▓       \\▓▓    \\     | ▓▓    ▓▓      | ▓▓      | ▓▓▓▓\\ ▓▓    | ▓▓|    \\\n  | ▓▓      | ▓▓▓▓▓         | ▓▓       _\\▓▓▓▓▓▓\\    | ▓▓▓▓▓▓▓▓      | ▓▓      | ▓▓\\▓▓ ▓▓    | ▓▓ \\▓▓▓▓\n _| ▓▓_     | ▓▓           _| ▓▓_     |  \\__| ▓▓    | ▓▓  | ▓▓     _| ▓▓_     | ▓▓ \\▓▓▓▓    | ▓▓__| ▓▓\n|   ▓▓ \\    | ▓▓          |   ▓▓ \\     \\▓▓    ▓▓    | ▓▓  | ▓▓    |   ▓▓ \\    | ▓▓  \\▓▓▓     \\▓▓    ▓▓\n \\▓▓▓▓▓▓     \\▓▓           \\▓▓▓▓▓▓      \\▓▓▓▓▓▓      \\▓▓   \\▓▓     \\▓▓▓▓▓▓     \\▓▓   \\▓▓      \\▓▓▓▓▓▓ \n                                                                                                      \n                                                                                                      \n                                                                                                      \n</code></div></pre>\n<p><a href=\"https://github.com/ashutosh00710/github-readme-activity-graph\" target=\"_blank\"><img src=\"https://github-readme-activity-graph.vercel.app/graph?username=Ashutosh00710&amp;theme=react\" alt=\"Ashutosh\'s github activity graph\" /></a></p>\n');
INSERT INTO `me_article_body` VALUES (46, '# Hi, here!\n\n![iFishin\'s GitHub stats](https://github-readme-stats.vercel.app/api?username=ifishin&show_icons=true&theme=tokyonight)\n\n![Top Langs](https://github-readme-stats.vercel.app/api/top-langs/?username=ifishin&layout=compact&theme=tokyonight)\n\n\n\n<!--START_SECTION:waka-->\n\n```txt\nNo activity tracked\n```\n\n<!--END_SECTION:waka-->\n\n~~~console\n ______      ________      ______       ______       __    __      ______      __    __       ______  \n|      \\    |        \\    |      \\     /      \\     |  \\  |  \\    |      \\    |  \\  |  \\     /      \\ \n \\▓▓▓▓▓▓    | ▓▓▓▓▓▓▓▓     \\▓▓▓▓▓▓    |  ▓▓▓▓▓▓\\    | ▓▓  | ▓▓     \\▓▓▓▓▓▓    | ▓▓\\ | ▓▓    |  ▓▓▓▓▓▓\\\n  | ▓▓      | ▓▓__          | ▓▓      | ▓▓___\\▓▓    | ▓▓__| ▓▓      | ▓▓      | ▓▓▓\\| ▓▓    | ▓▓ __\\▓▓\n  | ▓▓      | ▓▓  \\         | ▓▓       \\▓▓    \\     | ▓▓    ▓▓      | ▓▓      | ▓▓▓▓\\ ▓▓    | ▓▓|    \\\n  | ▓▓      | ▓▓▓▓▓         | ▓▓       _\\▓▓▓▓▓▓\\    | ▓▓▓▓▓▓▓▓      | ▓▓      | ▓▓\\▓▓ ▓▓    | ▓▓ \\▓▓▓▓\n _| ▓▓_     | ▓▓           _| ▓▓_     |  \\__| ▓▓    | ▓▓  | ▓▓     _| ▓▓_     | ▓▓ \\▓▓▓▓    | ▓▓__| ▓▓\n|   ▓▓ \\    | ▓▓          |   ▓▓ \\     \\▓▓    ▓▓    | ▓▓  | ▓▓    |   ▓▓ \\    | ▓▓  \\▓▓▓     \\▓▓    ▓▓\n \\▓▓▓▓▓▓     \\▓▓           \\▓▓▓▓▓▓      \\▓▓▓▓▓▓      \\▓▓   \\▓▓     \\▓▓▓▓▓▓     \\▓▓   \\▓▓      \\▓▓▓▓▓▓ \n                                                                                                      \n                                                                                                      \n                                                                                                      \n~~~\n[![Ashutosh\'s github activity graph](https://github-readme-activity-graph.vercel.app/graph?username=Ashutosh00710&theme=react)](https://github.com/ashutosh00710/github-readme-activity-graph)\n', '<h1><a id=\"Hi_here_0\"></a>Hi, here!</h1>\n<p><img src=\"https://github-readme-stats.vercel.app/api?username=ifishin&amp;show_icons=true&amp;theme=tokyonight\" alt=\"iFishin\'s GitHub stats\" /></p>\n<p><img src=\"https://github-readme-stats.vercel.app/api/top-langs/?username=ifishin&amp;layout=compact&amp;theme=tokyonight\" alt=\"Top Langs\" /></p>\n\n<pre><div class=\"hljs\"><code class=\"lang-txt\">No activity tracked\n</code></div></pre>\n\n<pre><div class=\"hljs\"><code class=\"lang-console\"> ______      ________      ______       ______       __    __      ______      __    __       ______  \n|      \\    |        \\    |      \\     /      \\     |  \\  |  \\    |      \\    |  \\  |  \\     /      \\ \n \\▓▓▓▓▓▓    | ▓▓▓▓▓▓▓▓     \\▓▓▓▓▓▓    |  ▓▓▓▓▓▓\\    | ▓▓  | ▓▓     \\▓▓▓▓▓▓    | ▓▓\\ | ▓▓    |  ▓▓▓▓▓▓\\\n  | ▓▓      | ▓▓__          | ▓▓      | ▓▓___\\▓▓    | ▓▓__| ▓▓      | ▓▓      | ▓▓▓\\| ▓▓    | ▓▓ __\\▓▓\n  | ▓▓      | ▓▓  \\         | ▓▓       \\▓▓    \\     | ▓▓    ▓▓      | ▓▓      | ▓▓▓▓\\ ▓▓    | ▓▓|    \\\n  | ▓▓      | ▓▓▓▓▓         | ▓▓       _\\▓▓▓▓▓▓\\    | ▓▓▓▓▓▓▓▓      | ▓▓      | ▓▓\\▓▓ ▓▓    | ▓▓ \\▓▓▓▓\n _| ▓▓_     | ▓▓           _| ▓▓_     |  \\__| ▓▓    | ▓▓  | ▓▓     _| ▓▓_     | ▓▓ \\▓▓▓▓    | ▓▓__| ▓▓\n|   ▓▓ \\    | ▓▓          |   ▓▓ \\     \\▓▓    ▓▓    | ▓▓  | ▓▓    |   ▓▓ \\    | ▓▓  \\▓▓▓     \\▓▓    ▓▓\n \\▓▓▓▓▓▓     \\▓▓           \\▓▓▓▓▓▓      \\▓▓▓▓▓▓      \\▓▓   \\▓▓     \\▓▓▓▓▓▓     \\▓▓   \\▓▓      \\▓▓▓▓▓▓ \n                                                                                                      \n                                                                                                      \n                                                                                                      \n</code></div></pre>\n<p><a href=\"https://github.com/ashutosh00710/github-readme-activity-graph\" target=\"_blank\"><img src=\"https://github-readme-activity-graph.vercel.app/graph?username=Ashutosh00710&amp;theme=react\" alt=\"Ashutosh\'s github activity graph\" /></a></p>\n');
INSERT INTO `me_article_body` VALUES (47, '# Hi, here!\n\n![iFishin\'s GitHub stats](https://github-readme-stats.vercel.app/api?username=ifishin&show_icons=true&theme=tokyonight)\n\n![Top Langs](https://github-readme-stats.vercel.app/api/top-langs/?username=ifishin&layout=compact&theme=tokyonight)\n\n\n\n<!--START_SECTION:waka-->\n\n```txt\nNo activity tracked\n```\n\n<!--END_SECTION:waka-->\n\n~~~console\n ______      ________      ______       ______       __    __      ______      __    __       ______  \n|      \\    |        \\    |      \\     /      \\     |  \\  |  \\    |      \\    |  \\  |  \\     /      \\ \n \\▓▓▓▓▓▓    | ▓▓▓▓▓▓▓▓     \\▓▓▓▓▓▓    |  ▓▓▓▓▓▓\\    | ▓▓  | ▓▓     \\▓▓▓▓▓▓    | ▓▓\\ | ▓▓    |  ▓▓▓▓▓▓\\\n  | ▓▓      | ▓▓__          | ▓▓      | ▓▓___\\▓▓    | ▓▓__| ▓▓      | ▓▓      | ▓▓▓\\| ▓▓    | ▓▓ __\\▓▓\n  | ▓▓      | ▓▓  \\         | ▓▓       \\▓▓    \\     | ▓▓    ▓▓      | ▓▓      | ▓▓▓▓\\ ▓▓    | ▓▓|    \\\n  | ▓▓      | ▓▓▓▓▓         | ▓▓       _\\▓▓▓▓▓▓\\    | ▓▓▓▓▓▓▓▓      | ▓▓      | ▓▓\\▓▓ ▓▓    | ▓▓ \\▓▓▓▓\n _| ▓▓_     | ▓▓           _| ▓▓_     |  \\__| ▓▓    | ▓▓  | ▓▓     _| ▓▓_     | ▓▓ \\▓▓▓▓    | ▓▓__| ▓▓\n|   ▓▓ \\    | ▓▓          |   ▓▓ \\     \\▓▓    ▓▓    | ▓▓  | ▓▓    |   ▓▓ \\    | ▓▓  \\▓▓▓     \\▓▓    ▓▓\n \\▓▓▓▓▓▓     \\▓▓           \\▓▓▓▓▓▓      \\▓▓▓▓▓▓      \\▓▓   \\▓▓     \\▓▓▓▓▓▓     \\▓▓   \\▓▓      \\▓▓▓▓▓▓ \n                                                                                                      \n                                                                                                      \n                                                                                                      \n~~~\n[![Ashutosh\'s github activity graph](https://github-readme-activity-graph.vercel.app/graph?username=Ashutosh00710&theme=react)](https://github.com/ashutosh00710/github-readme-activity-graph)\n', '<h1><a id=\"Hi_here_0\"></a>Hi, here!</h1>\n<p><img src=\"https://github-readme-stats.vercel.app/api?username=ifishin&amp;show_icons=true&amp;theme=tokyonight\" alt=\"iFishin\'s GitHub stats\" /></p>\n<p><img src=\"https://github-readme-stats.vercel.app/api/top-langs/?username=ifishin&amp;layout=compact&amp;theme=tokyonight\" alt=\"Top Langs\" /></p>\n\n<pre><div class=\"hljs\"><code class=\"lang-txt\">No activity tracked\n</code></div></pre>\n\n<pre><div class=\"hljs\"><code class=\"lang-console\"> ______      ________      ______       ______       __    __      ______      __    __       ______  \n|      \\    |        \\    |      \\     /      \\     |  \\  |  \\    |      \\    |  \\  |  \\     /      \\ \n \\▓▓▓▓▓▓    | ▓▓▓▓▓▓▓▓     \\▓▓▓▓▓▓    |  ▓▓▓▓▓▓\\    | ▓▓  | ▓▓     \\▓▓▓▓▓▓    | ▓▓\\ | ▓▓    |  ▓▓▓▓▓▓\\\n  | ▓▓      | ▓▓__          | ▓▓      | ▓▓___\\▓▓    | ▓▓__| ▓▓      | ▓▓      | ▓▓▓\\| ▓▓    | ▓▓ __\\▓▓\n  | ▓▓      | ▓▓  \\         | ▓▓       \\▓▓    \\     | ▓▓    ▓▓      | ▓▓      | ▓▓▓▓\\ ▓▓    | ▓▓|    \\\n  | ▓▓      | ▓▓▓▓▓         | ▓▓       _\\▓▓▓▓▓▓\\    | ▓▓▓▓▓▓▓▓      | ▓▓      | ▓▓\\▓▓ ▓▓    | ▓▓ \\▓▓▓▓\n _| ▓▓_     | ▓▓           _| ▓▓_     |  \\__| ▓▓    | ▓▓  | ▓▓     _| ▓▓_     | ▓▓ \\▓▓▓▓    | ▓▓__| ▓▓\n|   ▓▓ \\    | ▓▓          |   ▓▓ \\     \\▓▓    ▓▓    | ▓▓  | ▓▓    |   ▓▓ \\    | ▓▓  \\▓▓▓     \\▓▓    ▓▓\n \\▓▓▓▓▓▓     \\▓▓           \\▓▓▓▓▓▓      \\▓▓▓▓▓▓      \\▓▓   \\▓▓     \\▓▓▓▓▓▓     \\▓▓   \\▓▓      \\▓▓▓▓▓▓ \n                                                                                                      \n                                                                                                      \n                                                                                                      \n</code></div></pre>\n<p><a href=\"https://github.com/ashutosh00710/github-readme-activity-graph\" target=\"_blank\"><img src=\"https://github-readme-activity-graph.vercel.app/graph?username=Ashutosh00710&amp;theme=react\" alt=\"Ashutosh\'s github activity graph\" /></a></p>\n');
INSERT INTO `me_article_body` VALUES (48, '# Hi, here!\n\n![iFishin\'s GitHub stats](https://github-readme-stats.vercel.app/api?username=ifishin&show_icons=true&theme=tokyonight)\n\n![Top Langs](https://github-readme-stats.vercel.app/api/top-langs/?username=ifishin&layout=compact&theme=tokyonight)\n\n\n\n<!--START_SECTION:waka-->\n\n```txt\nNo activity tracked\n```\n\n<!--END_SECTION:waka-->\n\n~~~console\n ______      ________      ______       ______       __    __      ______      __    __       ______  \n|      \\    |        \\    |      \\     /      \\     |  \\  |  \\    |      \\    |  \\  |  \\     /      \\ \n \\▓▓▓▓▓▓    | ▓▓▓▓▓▓▓▓     \\▓▓▓▓▓▓    |  ▓▓▓▓▓▓\\    | ▓▓  | ▓▓     \\▓▓▓▓▓▓    | ▓▓\\ | ▓▓    |  ▓▓▓▓▓▓\\\n  | ▓▓      | ▓▓__          | ▓▓      | ▓▓___\\▓▓    | ▓▓__| ▓▓      | ▓▓      | ▓▓▓\\| ▓▓    | ▓▓ __\\▓▓\n  | ▓▓      | ▓▓  \\         | ▓▓       \\▓▓    \\     | ▓▓    ▓▓      | ▓▓      | ▓▓▓▓\\ ▓▓    | ▓▓|    \\\n  | ▓▓      | ▓▓▓▓▓         | ▓▓       _\\▓▓▓▓▓▓\\    | ▓▓▓▓▓▓▓▓      | ▓▓      | ▓▓\\▓▓ ▓▓    | ▓▓ \\▓▓▓▓\n _| ▓▓_     | ▓▓           _| ▓▓_     |  \\__| ▓▓    | ▓▓  | ▓▓     _| ▓▓_     | ▓▓ \\▓▓▓▓    | ▓▓__| ▓▓\n|   ▓▓ \\    | ▓▓          |   ▓▓ \\     \\▓▓    ▓▓    | ▓▓  | ▓▓    |   ▓▓ \\    | ▓▓  \\▓▓▓     \\▓▓    ▓▓\n \\▓▓▓▓▓▓     \\▓▓           \\▓▓▓▓▓▓      \\▓▓▓▓▓▓      \\▓▓   \\▓▓     \\▓▓▓▓▓▓     \\▓▓   \\▓▓      \\▓▓▓▓▓▓ \n                                                                                                      \n                                                                                                      \n                                                                                                      \n~~~\n[![Ashutosh\'s github activity graph](https://github-readme-activity-graph.vercel.app/graph?username=Ashutosh00710&theme=react)](https://github.com/ashutosh00710/github-readme-activity-graph)\n', '<h1><a id=\"Hi_here_0\"></a>Hi, here!</h1>\n<p><img src=\"https://github-readme-stats.vercel.app/api?username=ifishin&amp;show_icons=true&amp;theme=tokyonight\" alt=\"iFishin\'s GitHub stats\" /></p>\n<p><img src=\"https://github-readme-stats.vercel.app/api/top-langs/?username=ifishin&amp;layout=compact&amp;theme=tokyonight\" alt=\"Top Langs\" /></p>\n\n<pre><div class=\"hljs\"><code class=\"lang-txt\">No activity tracked\n</code></div></pre>\n\n<pre><div class=\"hljs\"><code class=\"lang-console\"> ______      ________      ______       ______       __    __      ______      __    __       ______  \n|      \\    |        \\    |      \\     /      \\     |  \\  |  \\    |      \\    |  \\  |  \\     /      \\ \n \\▓▓▓▓▓▓    | ▓▓▓▓▓▓▓▓     \\▓▓▓▓▓▓    |  ▓▓▓▓▓▓\\    | ▓▓  | ▓▓     \\▓▓▓▓▓▓    | ▓▓\\ | ▓▓    |  ▓▓▓▓▓▓\\\n  | ▓▓      | ▓▓__          | ▓▓      | ▓▓___\\▓▓    | ▓▓__| ▓▓      | ▓▓      | ▓▓▓\\| ▓▓    | ▓▓ __\\▓▓\n  | ▓▓      | ▓▓  \\         | ▓▓       \\▓▓    \\     | ▓▓    ▓▓      | ▓▓      | ▓▓▓▓\\ ▓▓    | ▓▓|    \\\n  | ▓▓      | ▓▓▓▓▓         | ▓▓       _\\▓▓▓▓▓▓\\    | ▓▓▓▓▓▓▓▓      | ▓▓      | ▓▓\\▓▓ ▓▓    | ▓▓ \\▓▓▓▓\n _| ▓▓_     | ▓▓           _| ▓▓_     |  \\__| ▓▓    | ▓▓  | ▓▓     _| ▓▓_     | ▓▓ \\▓▓▓▓    | ▓▓__| ▓▓\n|   ▓▓ \\    | ▓▓          |   ▓▓ \\     \\▓▓    ▓▓    | ▓▓  | ▓▓    |   ▓▓ \\    | ▓▓  \\▓▓▓     \\▓▓    ▓▓\n \\▓▓▓▓▓▓     \\▓▓           \\▓▓▓▓▓▓      \\▓▓▓▓▓▓      \\▓▓   \\▓▓     \\▓▓▓▓▓▓     \\▓▓   \\▓▓      \\▓▓▓▓▓▓ \n                                                                                                      \n                                                                                                      \n                                                                                                      \n</code></div></pre>\n<p><a href=\"https://github.com/ashutosh00710/github-readme-activity-graph\" target=\"_blank\"><img src=\"https://github-readme-activity-graph.vercel.app/graph?username=Ashutosh00710&amp;theme=react\" alt=\"Ashutosh\'s github activity graph\" /></a></p>\n');

-- ----------------------------
-- Table structure for me_article_tag
-- ----------------------------
DROP TABLE IF EXISTS `me_article_tag`;
CREATE TABLE `me_article_tag`  (
  `article_id` int NOT NULL,
  `tag_id` int NOT NULL,
  INDEX `FK2s65pu9coxh7w16s8jycih79w`(`tag_id` ASC) USING BTREE,
  INDEX `FKsmysra6pt3ehcvts18q2h4409`(`article_id` ASC) USING BTREE,
  CONSTRAINT `FK2s65pu9coxh7w16s8jycih79w` FOREIGN KEY (`tag_id`) REFERENCES `me_tag` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `FKsmysra6pt3ehcvts18q2h4409` FOREIGN KEY (`article_id`) REFERENCES `me_article` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of me_article_tag
-- ----------------------------
INSERT INTO `me_article_tag` VALUES (10, 7);
INSERT INTO `me_article_tag` VALUES (10, 8);
INSERT INTO `me_article_tag` VALUES (10, 5);
INSERT INTO `me_article_tag` VALUES (10, 6);
INSERT INTO `me_article_tag` VALUES (25, 1);
INSERT INTO `me_article_tag` VALUES (26, 2);
INSERT INTO `me_article_tag` VALUES (27, 1);
INSERT INTO `me_article_tag` VALUES (9, 2);
INSERT INTO `me_article_tag` VALUES (9, 1);
INSERT INTO `me_article_tag` VALUES (28, 2);
INSERT INTO `me_article_tag` VALUES (28, 1);

-- ----------------------------
-- Table structure for me_category
-- ----------------------------
DROP TABLE IF EXISTS `me_category`;
CREATE TABLE `me_category`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `categoryname` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `description` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 6 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of me_category
-- ----------------------------
INSERT INTO `me_category` VALUES (1, '/category/front.png', '前端', NULL);
INSERT INTO `me_category` VALUES (2, '/category/back.png', '后端', NULL);
INSERT INTO `me_category` VALUES (3, '/category/lift.jpg', '生活', NULL);
INSERT INTO `me_category` VALUES (4, '/category/database.png', '数据库', NULL);
INSERT INTO `me_category` VALUES (5, '/category/language.png', '编程语言', NULL);

-- ----------------------------
-- Table structure for me_comment
-- ----------------------------
DROP TABLE IF EXISTS `me_comment`;
CREATE TABLE `me_comment`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `content` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `create_date` datetime NULL DEFAULT NULL,
  `article_id` int NULL DEFAULT NULL,
  `author_id` bigint NULL DEFAULT NULL,
  `parent_id` int NULL DEFAULT NULL,
  `to_uid` bigint NULL DEFAULT NULL,
  `level` varchar(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `FKecq0fuo9k0lnmea6r01vfhiok`(`article_id` ASC) USING BTREE,
  INDEX `FKkvuyh6ih7dt1rfqhwsjomsa6i`(`author_id` ASC) USING BTREE,
  INDEX `FKaecafrcorkhyyp1luffinsfqs`(`parent_id` ASC) USING BTREE,
  INDEX `FK73dgr23lbs3ebex5qvqyku308`(`to_uid` ASC) USING BTREE,
  CONSTRAINT `FK73dgr23lbs3ebex5qvqyku308` FOREIGN KEY (`to_uid`) REFERENCES `sys_user` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `FKaecafrcorkhyyp1luffinsfqs` FOREIGN KEY (`parent_id`) REFERENCES `me_comment` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `FKecq0fuo9k0lnmea6r01vfhiok` FOREIGN KEY (`article_id`) REFERENCES `me_article` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `FKkvuyh6ih7dt1rfqhwsjomsa6i` FOREIGN KEY (`author_id`) REFERENCES `sys_user` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 57 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of me_comment
-- ----------------------------
INSERT INTO `me_comment` VALUES (53, '11111', '2023-06-23 08:53:10', 25, 1, NULL, NULL, '0');
INSERT INTO `me_comment` VALUES (54, 'Well Done！', '2023-06-27 18:27:32', 28, 1, NULL, NULL, '0');
INSERT INTO `me_comment` VALUES (55, '？', '2023-06-27 18:27:39', 28, 1, 54, NULL, '1');
INSERT INTO `me_comment` VALUES (56, '？？？', '2023-06-27 18:27:53', 28, 1, 54, 1, '2');

-- ----------------------------
-- Table structure for me_tag
-- ----------------------------
DROP TABLE IF EXISTS `me_tag`;
CREATE TABLE `me_tag`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `tagname` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 27 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of me_tag
-- ----------------------------
INSERT INTO `me_tag` VALUES (1, NULL, '生活');
INSERT INTO `me_tag` VALUES (2, NULL, '技术');

-- ----------------------------
-- Table structure for sys_log
-- ----------------------------
DROP TABLE IF EXISTS `sys_log`;
CREATE TABLE `sys_log`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `create_date` datetime NULL DEFAULT NULL,
  `ip` varchar(15) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `method` varchar(100) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `module` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `nickname` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `operation` varchar(25) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `params` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `time` bigint NULL DEFAULT NULL,
  `userid` bigint NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 5076 CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_log
-- ----------------------------
INSERT INTO `sys_log` VALUES (1, '2023-06-25 20:02:55', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.login()', '登录', NULL, '登录', NULL, 11, NULL);
INSERT INTO `sys_log` VALUES (2, '2023-06-25 20:03:02', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.login()', '登录', NULL, '登录', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (3, '2023-06-25 20:03:10', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.login()', '登录', NULL, '登录', NULL, 9, NULL);
INSERT INTO `sys_log` VALUES (4330, '2023-06-25 20:36:50', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 15, NULL);
INSERT INTO `sys_log` VALUES (4331, '2023-06-25 20:37:03', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.login()', '登录', NULL, '登录', NULL, 40, NULL);
INSERT INTO `sys_log` VALUES (4332, '2023-06-25 20:37:08', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 7, NULL);
INSERT INTO `sys_log` VALUES (4333, '2023-06-25 20:37:11', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.deleteTagById()', '标签', NULL, '删除标签', NULL, 28, NULL);
INSERT INTO `sys_log` VALUES (4334, '2023-06-25 20:37:11', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 5, NULL);
INSERT INTO `sys_log` VALUES (4335, '2023-06-25 20:37:13', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.deleteTagById()', '标签', NULL, '删除标签', NULL, 9, NULL);
INSERT INTO `sys_log` VALUES (4336, '2023-06-25 20:37:13', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4337, '2023-06-25 20:37:17', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.deleteTagById()', '标签', NULL, '删除标签', NULL, 7, NULL);
INSERT INTO `sys_log` VALUES (4338, '2023-06-25 20:37:17', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (4339, '2023-06-25 20:37:19', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.deleteTagById()', '标签', NULL, '删除标签', NULL, 8, NULL);
INSERT INTO `sys_log` VALUES (4340, '2023-06-25 20:37:19', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 5, NULL);
INSERT INTO `sys_log` VALUES (4341, '2023-06-25 20:37:21', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.deleteTagById()', '标签', NULL, '删除标签', NULL, 8, NULL);
INSERT INTO `sys_log` VALUES (4342, '2023-06-25 20:37:21', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4343, '2023-06-25 20:37:25', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.deleteTagById()', '标签', NULL, '删除标签', NULL, 8, NULL);
INSERT INTO `sys_log` VALUES (4344, '2023-06-25 20:37:25', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4345, '2023-06-25 20:41:52', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 7, NULL);
INSERT INTO `sys_log` VALUES (4346, '2023-06-25 20:42:01', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 5, NULL);
INSERT INTO `sys_log` VALUES (4347, '2023-06-25 20:42:01', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 28, NULL);
INSERT INTO `sys_log` VALUES (4348, '2023-06-25 20:43:07', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 9, NULL);
INSERT INTO `sys_log` VALUES (4349, '2023-06-25 20:43:09', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4350, '2023-06-25 20:43:09', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 7, NULL);
INSERT INTO `sys_log` VALUES (4351, '2023-06-25 20:43:11', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.listUsers()', '用户', NULL, '获取所有用户', NULL, 9, NULL);
INSERT INTO `sys_log` VALUES (4352, '2023-06-25 20:46:56', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4353, '2023-06-25 20:46:58', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4354, '2023-06-25 20:46:58', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 7, NULL);
INSERT INTO `sys_log` VALUES (4355, '2023-06-25 20:47:01', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.listUsers()', '用户', NULL, '获取所有用户', NULL, 5, NULL);
INSERT INTO `sys_log` VALUES (4356, '2023-06-25 20:47:29', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4357, '2023-06-25 20:47:29', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (4358, '2023-06-25 20:47:31', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4359, '2023-06-25 20:47:52', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4360, '2023-06-25 20:47:52', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4361, '2023-06-25 20:48:05', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4362, '2023-06-25 20:48:07', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4363, '2023-06-25 20:49:52', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 8, NULL);
INSERT INTO `sys_log` VALUES (4364, '2023-06-25 20:49:52', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 9, NULL);
INSERT INTO `sys_log` VALUES (4365, '2023-06-25 20:50:27', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4366, '2023-06-25 20:50:27', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (4367, '2023-06-25 20:50:50', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4368, '2023-06-25 20:50:50', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4369, '2023-06-25 20:50:57', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4370, '2023-06-25 20:50:57', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4371, '2023-06-25 20:59:00', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 11, NULL);
INSERT INTO `sys_log` VALUES (4372, '2023-06-25 20:59:00', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 14, NULL);
INSERT INTO `sys_log` VALUES (4373, '2023-06-25 21:00:35', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 10, NULL);
INSERT INTO `sys_log` VALUES (4374, '2023-06-25 21:00:35', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 10, NULL);
INSERT INTO `sys_log` VALUES (4375, '2023-06-25 21:02:10', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 7, NULL);
INSERT INTO `sys_log` VALUES (4376, '2023-06-25 21:02:10', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 9, NULL);
INSERT INTO `sys_log` VALUES (4377, '2023-06-25 21:02:35', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4378, '2023-06-25 21:02:35', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4379, '2023-06-25 21:06:12', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 10, NULL);
INSERT INTO `sys_log` VALUES (4380, '2023-06-25 21:06:12', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 12, NULL);
INSERT INTO `sys_log` VALUES (4381, '2023-06-25 21:07:56', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 5, NULL);
INSERT INTO `sys_log` VALUES (4382, '2023-06-26 11:04:55', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 232, NULL);
INSERT INTO `sys_log` VALUES (4383, '2023-06-26 11:04:55', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 249, NULL);
INSERT INTO `sys_log` VALUES (4384, '2023-06-26 11:04:55', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 236, NULL);
INSERT INTO `sys_log` VALUES (4385, '2023-06-26 11:04:55', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 219, NULL);
INSERT INTO `sys_log` VALUES (4386, '2023-06-26 11:04:55', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 249, NULL);
INSERT INTO `sys_log` VALUES (4387, '2023-06-26 11:05:37', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4388, '2023-06-26 11:05:37', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4389, '2023-06-26 11:05:38', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4390, '2023-06-26 11:05:38', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 7, NULL);
INSERT INTO `sys_log` VALUES (4391, '2023-06-26 11:05:40', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4392, '2023-06-26 11:05:40', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (4393, '2023-06-26 11:05:40', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (4394, '2023-06-26 11:05:40', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4395, '2023-06-26 11:05:40', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (4396, '2023-06-26 11:05:47', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4397, '2023-06-26 11:05:47', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4398, '2023-06-26 11:05:49', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.getArticleAndAddViews()', '文章', NULL, '根据id获取文章，添加阅读数', NULL, 35, NULL);
INSERT INTO `sys_log` VALUES (4399, '2023-06-26 11:05:49', '0:0:0:0:0:0:0:1', 'com.fish.controller.CommentController.listCommentsByArticle()', '评论', NULL, '根据文章获取评论', NULL, 16, NULL);
INSERT INTO `sys_log` VALUES (4400, '2023-06-26 11:05:52', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4401, '2023-06-26 11:05:52', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4402, '2023-06-26 11:05:52', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4403, '2023-06-26 11:05:52', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4404, '2023-06-26 11:05:52', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4405, '2023-06-26 11:05:58', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.getArticleAndAddViews()', '文章', NULL, '根据id获取文章，添加阅读数', NULL, 7, NULL);
INSERT INTO `sys_log` VALUES (4406, '2023-06-26 11:05:58', '0:0:0:0:0:0:0:1', 'com.fish.controller.CommentController.listCommentsByArticle()', '评论', NULL, '根据文章获取评论', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4407, '2023-06-26 16:18:27', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 70, NULL);
INSERT INTO `sys_log` VALUES (4408, '2023-06-26 16:18:27', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 66, NULL);
INSERT INTO `sys_log` VALUES (4409, '2023-06-26 16:18:27', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 65, NULL);
INSERT INTO `sys_log` VALUES (4410, '2023-06-26 16:18:27', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 70, NULL);
INSERT INTO `sys_log` VALUES (4411, '2023-06-26 16:18:27', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 65, NULL);
INSERT INTO `sys_log` VALUES (4412, '2023-06-26 16:18:30', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4413, '2023-06-26 16:18:30', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4414, '2023-06-26 16:18:47', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.login()', '登录', NULL, '登录', NULL, 113, NULL);
INSERT INTO `sys_log` VALUES (4415, '2023-06-26 16:18:47', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (4416, '2023-06-26 16:18:47', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4417, '2023-06-26 16:18:47', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4418, '2023-06-26 16:18:47', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4419, '2023-06-26 16:18:47', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4420, '2023-06-26 16:18:47', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4421, '2023-06-26 16:19:00', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4422, '2023-06-26 16:19:00', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4423, '2023-06-26 16:19:03', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.getTagDetail()', '标签', NULL, '根据id获取详细标签，文章数', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4424, '2023-06-26 16:19:03', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 14, NULL);
INSERT INTO `sys_log` VALUES (4425, '2023-06-26 16:19:04', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4426, '2023-06-26 16:19:04', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4427, '2023-06-26 16:19:04', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4428, '2023-06-26 16:19:04', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4429, '2023-06-26 16:19:04', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4430, '2023-06-26 16:41:51', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (4431, '2023-06-26 16:41:51', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4432, '2023-06-26 16:41:59', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4433, '2023-06-26 16:41:59', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 7, NULL);
INSERT INTO `sys_log` VALUES (4434, '2023-06-26 16:42:06', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4435, '2023-06-26 16:42:06', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4436, '2023-06-26 16:42:15', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4437, '2023-06-26 16:42:15', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4438, '2023-06-26 16:42:15', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 11, NULL);
INSERT INTO `sys_log` VALUES (4439, '2023-06-26 16:42:15', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 12, NULL);
INSERT INTO `sys_log` VALUES (4440, '2023-06-26 16:42:15', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 16, NULL);
INSERT INTO `sys_log` VALUES (4441, '2023-06-26 16:42:21', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.getArticleAndAddViews()', '文章', NULL, '根据id获取文章，添加阅读数', NULL, 10, NULL);
INSERT INTO `sys_log` VALUES (4442, '2023-06-26 16:42:21', '0:0:0:0:0:0:0:1', 'com.fish.controller.CommentController.listCommentsByArticle()', '评论', NULL, '根据文章获取评论', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4443, '2023-06-26 16:42:28', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4444, '2023-06-26 16:42:28', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4445, '2023-06-26 16:42:28', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4446, '2023-06-26 16:42:28', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4447, '2023-06-26 16:42:28', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4448, '2023-06-26 16:42:29', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4449, '2023-06-26 16:42:29', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4450, '2023-06-26 16:42:33', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4451, '2023-06-26 16:42:33', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4452, '2023-06-26 16:42:38', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4453, '2023-06-26 16:42:38', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4454, '2023-06-26 16:42:38', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4455, '2023-06-26 16:42:38', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4456, '2023-06-26 16:42:38', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4457, '2023-06-26 16:59:38', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 7, NULL);
INSERT INTO `sys_log` VALUES (4458, '2023-06-26 16:59:38', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4459, '2023-06-26 17:06:52', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 0, NULL);
INSERT INTO `sys_log` VALUES (4460, '2023-06-26 17:06:52', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4461, '2023-06-26 17:06:52', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 24, NULL);
INSERT INTO `sys_log` VALUES (4462, '2023-06-26 17:06:52', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 26, NULL);
INSERT INTO `sys_log` VALUES (4463, '2023-06-26 17:06:52', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 28, NULL);
INSERT INTO `sys_log` VALUES (4464, '2023-06-26 17:06:52', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 32, NULL);
INSERT INTO `sys_log` VALUES (4465, '2023-06-26 17:10:51', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4466, '2023-06-26 17:10:51', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4467, '2023-06-26 17:10:51', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 14, NULL);
INSERT INTO `sys_log` VALUES (4468, '2023-06-26 17:10:51', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 13, NULL);
INSERT INTO `sys_log` VALUES (4469, '2023-06-26 17:10:51', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 15, NULL);
INSERT INTO `sys_log` VALUES (4470, '2023-06-26 17:10:51', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 19, NULL);
INSERT INTO `sys_log` VALUES (4471, '2023-06-26 17:11:08', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.logout()', '退出', NULL, '退出', NULL, 5, NULL);
INSERT INTO `sys_log` VALUES (4472, '2023-06-26 17:11:15', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.login()', '登录', NULL, '登录', NULL, 7, NULL);
INSERT INTO `sys_log` VALUES (4473, '2023-06-26 17:11:15', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 0, NULL);
INSERT INTO `sys_log` VALUES (4474, '2023-06-26 17:11:16', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4475, '2023-06-26 17:11:16', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4476, '2023-06-26 17:11:16', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4477, '2023-06-26 17:11:16', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4478, '2023-06-26 17:11:16', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4479, '2023-06-26 17:11:36', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 0, NULL);
INSERT INTO `sys_log` VALUES (4480, '2023-06-26 17:11:36', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4481, '2023-06-26 17:11:36', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4482, '2023-06-26 17:11:36', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4483, '2023-06-26 17:11:36', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4484, '2023-06-26 17:11:36', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4485, '2023-06-26 17:11:38', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.logout()', '退出', NULL, '退出', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4486, '2023-06-26 17:11:43', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.login()', '登录', NULL, '登录', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (4487, '2023-06-26 17:11:44', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4488, '2023-06-26 17:11:44', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4489, '2023-06-26 17:11:44', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4490, '2023-06-26 17:11:44', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4491, '2023-06-26 17:11:44', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4492, '2023-06-26 17:11:44', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4493, '2023-06-26 17:15:32', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4494, '2023-06-26 17:15:32', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4495, '2023-06-26 17:15:32', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 11, NULL);
INSERT INTO `sys_log` VALUES (4496, '2023-06-26 17:15:32', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4497, '2023-06-26 17:15:32', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 9, NULL);
INSERT INTO `sys_log` VALUES (4498, '2023-06-26 17:15:32', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 21, NULL);
INSERT INTO `sys_log` VALUES (4499, '2023-06-26 17:17:42', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.logout()', '退出', NULL, '退出', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4500, '2023-06-26 17:17:51', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.login()', '登录', NULL, '登录', NULL, 7, NULL);
INSERT INTO `sys_log` VALUES (4501, '2023-06-26 17:17:51', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 0, NULL);
INSERT INTO `sys_log` VALUES (4502, '2023-06-26 17:17:51', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4503, '2023-06-26 17:17:51', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 13, NULL);
INSERT INTO `sys_log` VALUES (4504, '2023-06-26 17:17:51', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 15, NULL);
INSERT INTO `sys_log` VALUES (4505, '2023-06-26 17:17:51', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 17, NULL);
INSERT INTO `sys_log` VALUES (4506, '2023-06-26 17:17:51', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 21, NULL);
INSERT INTO `sys_log` VALUES (4507, '2023-06-26 17:18:04', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.logout()', '退出', NULL, '退出', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4508, '2023-06-26 17:18:07', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.login()', '登录', NULL, '登录', NULL, 7, NULL);
INSERT INTO `sys_log` VALUES (4509, '2023-06-26 17:18:38', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.login()', '登录', NULL, '登录', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4510, '2023-06-26 17:18:43', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.login()', '登录', NULL, '登录', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (4511, '2023-06-26 17:18:43', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 0, NULL);
INSERT INTO `sys_log` VALUES (4512, '2023-06-26 17:18:43', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4513, '2023-06-26 17:18:43', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4514, '2023-06-26 17:18:43', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4515, '2023-06-26 17:18:43', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4516, '2023-06-26 17:18:43', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4517, '2023-06-26 17:22:17', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 0, NULL);
INSERT INTO `sys_log` VALUES (4518, '2023-06-26 17:22:17', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4519, '2023-06-26 17:22:17', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 13, NULL);
INSERT INTO `sys_log` VALUES (4520, '2023-06-26 17:22:17', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 15, NULL);
INSERT INTO `sys_log` VALUES (4521, '2023-06-26 17:22:17', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 17, NULL);
INSERT INTO `sys_log` VALUES (4522, '2023-06-26 17:22:17', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 21, NULL);
INSERT INTO `sys_log` VALUES (4523, '2023-06-26 17:22:45', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.logout()', '退出', NULL, '退出', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4524, '2023-06-26 17:22:51', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.login()', '登录', NULL, '登录', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (4525, '2023-06-26 17:22:51', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 0, NULL);
INSERT INTO `sys_log` VALUES (4526, '2023-06-26 17:22:51', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4527, '2023-06-26 17:22:51', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4528, '2023-06-26 17:22:51', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4529, '2023-06-26 17:22:51', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4530, '2023-06-26 17:22:51', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4531, '2023-06-26 17:23:26', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 0, NULL);
INSERT INTO `sys_log` VALUES (4532, '2023-06-26 17:23:26', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4533, '2023-06-26 17:23:26', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4534, '2023-06-26 17:23:26', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4535, '2023-06-26 17:23:26', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4536, '2023-06-26 17:23:26', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4537, '2023-06-26 17:23:45', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.logout()', '退出', NULL, '退出', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4538, '2023-06-26 17:23:54', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.login()', '登录', NULL, '登录', NULL, 7, NULL);
INSERT INTO `sys_log` VALUES (4539, '2023-06-26 17:23:54', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4540, '2023-06-26 17:23:54', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4541, '2023-06-26 17:23:54', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4542, '2023-06-26 17:23:54', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4543, '2023-06-26 17:23:54', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4544, '2023-06-26 17:23:54', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4545, '2023-06-26 17:24:00', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4546, '2023-06-26 17:24:00', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4547, '2023-06-26 18:54:29', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 18, NULL);
INSERT INTO `sys_log` VALUES (4548, '2023-06-26 18:54:29', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 85, NULL);
INSERT INTO `sys_log` VALUES (4549, '2023-06-26 18:54:29', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 88, NULL);
INSERT INTO `sys_log` VALUES (4550, '2023-06-26 18:54:29', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 111, NULL);
INSERT INTO `sys_log` VALUES (4551, '2023-06-26 18:54:29', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 113, NULL);
INSERT INTO `sys_log` VALUES (4552, '2023-06-26 18:54:30', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 164, NULL);
INSERT INTO `sys_log` VALUES (4553, '2023-06-26 18:54:41', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.login()', '登录', NULL, '登录', NULL, 30, NULL);
INSERT INTO `sys_log` VALUES (4554, '2023-06-26 18:54:41', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4555, '2023-06-26 18:54:41', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4556, '2023-06-26 18:54:41', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 5, NULL);
INSERT INTO `sys_log` VALUES (4557, '2023-06-26 18:54:41', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4558, '2023-06-26 18:54:41', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 5, NULL);
INSERT INTO `sys_log` VALUES (4559, '2023-06-26 18:54:41', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 5, NULL);
INSERT INTO `sys_log` VALUES (4560, '2023-06-26 18:54:42', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4561, '2023-06-26 18:54:42', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4562, '2023-06-26 18:57:00', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.logout()', '退出', NULL, '退出', NULL, 5, NULL);
INSERT INTO `sys_log` VALUES (4563, '2023-06-26 18:57:10', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.login()', '登录', NULL, '登录', NULL, 9, NULL);
INSERT INTO `sys_log` VALUES (4564, '2023-06-26 18:57:10', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 0, NULL);
INSERT INTO `sys_log` VALUES (4565, '2023-06-26 18:57:10', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 5, NULL);
INSERT INTO `sys_log` VALUES (4566, '2023-06-26 18:57:10', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 13, NULL);
INSERT INTO `sys_log` VALUES (4567, '2023-06-26 18:57:10', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 14, NULL);
INSERT INTO `sys_log` VALUES (4568, '2023-06-26 18:57:10', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 19, NULL);
INSERT INTO `sys_log` VALUES (4569, '2023-06-26 18:57:10', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 19, NULL);
INSERT INTO `sys_log` VALUES (4570, '2023-06-26 18:57:20', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.getArticleAndAddViews()', '文章', NULL, '根据id获取文章，添加阅读数', NULL, 31, NULL);
INSERT INTO `sys_log` VALUES (4571, '2023-06-26 18:57:20', '0:0:0:0:0:0:0:1', 'com.fish.controller.CommentController.listCommentsByArticle()', '评论', NULL, '根据文章获取评论', NULL, 11, NULL);
INSERT INTO `sys_log` VALUES (4572, '2023-06-26 18:57:23', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4573, '2023-06-26 18:57:23', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4574, '2023-06-26 18:57:23', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4575, '2023-06-26 18:57:23', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4576, '2023-06-26 18:57:23', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4577, '2023-06-26 18:57:37', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4578, '2023-06-26 18:57:40', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4579, '2023-06-26 18:57:40', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4580, '2023-06-26 18:57:42', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4581, '2023-06-26 18:57:42', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 7, NULL);
INSERT INTO `sys_log` VALUES (4582, '2023-06-26 18:58:19', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4583, '2023-06-26 18:58:19', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4584, '2023-06-26 18:58:53', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4585, '2023-06-26 18:58:53', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4586, '2023-06-26 18:58:54', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4587, '2023-06-26 18:58:54', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4588, '2023-06-26 18:58:56', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4589, '2023-06-26 18:58:56', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4590, '2023-06-26 18:58:57', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4591, '2023-06-26 18:58:57', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4592, '2023-06-26 18:58:58', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4593, '2023-06-26 18:58:58', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4594, '2023-06-26 18:59:00', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4595, '2023-06-26 18:59:00', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4596, '2023-06-26 18:59:00', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 9, NULL);
INSERT INTO `sys_log` VALUES (4597, '2023-06-26 18:59:00', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 9, NULL);
INSERT INTO `sys_log` VALUES (4598, '2023-06-26 18:59:00', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 11, NULL);
INSERT INTO `sys_log` VALUES (4599, '2023-06-26 18:59:00', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4600, '2023-06-26 18:59:00', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4601, '2023-06-26 18:59:10', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4602, '2023-06-26 18:59:10', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4603, '2023-06-26 18:59:10', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4604, '2023-06-26 18:59:10', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4605, '2023-06-26 18:59:10', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4606, '2023-06-26 18:59:10', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4607, '2023-06-26 18:59:10', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4608, '2023-06-26 18:59:20', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4609, '2023-06-26 18:59:20', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4610, '2023-06-26 18:59:21', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4611, '2023-06-26 18:59:21', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4612, '2023-06-26 18:59:25', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4613, '2023-06-26 18:59:25', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4614, '2023-06-26 18:59:25', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4615, '2023-06-26 18:59:25', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4616, '2023-06-26 18:59:25', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4617, '2023-06-26 18:59:26', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4618, '2023-06-26 18:59:26', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4619, '2023-06-26 19:00:24', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4620, '2023-06-26 19:00:24', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4621, '2023-06-26 19:00:24', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4622, '2023-06-26 19:00:24', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4623, '2023-06-26 19:00:24', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4624, '2023-06-26 19:00:29', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.logout()', '退出', NULL, '退出', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4625, '2023-06-26 19:02:28', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 11, NULL);
INSERT INTO `sys_log` VALUES (4626, '2023-06-26 19:02:28', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 12, NULL);
INSERT INTO `sys_log` VALUES (4627, '2023-06-26 19:02:28', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 13, NULL);
INSERT INTO `sys_log` VALUES (4628, '2023-06-26 19:02:28', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 15, NULL);
INSERT INTO `sys_log` VALUES (4629, '2023-06-26 19:02:28', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 15, NULL);
INSERT INTO `sys_log` VALUES (4630, '2023-06-26 19:02:35', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4631, '2023-06-26 19:02:35', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4632, '2023-06-26 19:02:35', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4633, '2023-06-26 19:02:35', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4634, '2023-06-26 19:02:35', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4635, '2023-06-26 19:02:40', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4636, '2023-06-26 19:02:40', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4637, '2023-06-26 19:02:40', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4638, '2023-06-26 19:02:40', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4639, '2023-06-26 19:02:40', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4640, '2023-06-26 19:02:46', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.login()', '登录', NULL, '登录', NULL, 7, NULL);
INSERT INTO `sys_log` VALUES (4641, '2023-06-26 19:02:46', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4642, '2023-06-26 19:02:46', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4643, '2023-06-26 19:02:46', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4644, '2023-06-26 19:02:46', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4645, '2023-06-26 19:02:46', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4646, '2023-06-26 19:02:46', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4647, '2023-06-26 19:02:51', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 8, NULL);
INSERT INTO `sys_log` VALUES (4648, '2023-06-26 19:02:51', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorys()', '文章分类', NULL, '获取所有文章分类', NULL, 8, NULL);
INSERT INTO `sys_log` VALUES (4649, '2023-06-26 19:02:57', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4650, '2023-06-26 19:02:57', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4651, '2023-06-26 19:02:57', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4652, '2023-06-26 19:02:57', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4653, '2023-06-26 19:02:57', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4654, '2023-06-26 19:02:58', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4655, '2023-06-26 19:02:58', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4656, '2023-06-26 19:03:01', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4657, '2023-06-26 19:03:01', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4658, '2023-06-26 19:03:04', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4659, '2023-06-26 19:03:04', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4660, '2023-06-26 19:03:10', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4661, '2023-06-26 19:03:10', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4662, '2023-06-26 19:03:10', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4663, '2023-06-26 19:03:10', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4664, '2023-06-26 19:03:10', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4665, '2023-06-26 19:03:13', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4666, '2023-06-26 19:03:13', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4667, '2023-06-26 19:03:42', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4668, '2023-06-26 19:03:42', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4669, '2023-06-26 19:03:44', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4670, '2023-06-26 19:03:44', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4671, '2023-06-26 19:03:47', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4672, '2023-06-26 19:03:48', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4673, '2023-06-26 19:04:02', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4674, '2023-06-26 19:04:02', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4675, '2023-06-26 19:04:03', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4676, '2023-06-26 19:04:03', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4677, '2023-06-26 19:04:34', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4678, '2023-06-26 19:04:34', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4679, '2023-06-26 19:04:34', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4680, '2023-06-26 19:04:35', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 8, NULL);
INSERT INTO `sys_log` VALUES (4681, '2023-06-26 19:04:35', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4682, '2023-06-26 19:04:35', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4683, '2023-06-26 19:05:53', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (4684, '2023-06-26 19:05:53', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 7, NULL);
INSERT INTO `sys_log` VALUES (4685, '2023-06-26 19:05:54', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4686, '2023-06-26 19:05:54', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4687, '2023-06-26 19:05:54', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 7, NULL);
INSERT INTO `sys_log` VALUES (4688, '2023-06-26 19:05:54', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (4689, '2023-06-26 19:05:54', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 10, NULL);
INSERT INTO `sys_log` VALUES (4690, '2023-06-26 19:05:56', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4691, '2023-06-26 19:05:56', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4692, '2023-06-26 19:11:40', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (4693, '2023-06-26 19:11:40', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 8, NULL);
INSERT INTO `sys_log` VALUES (4694, '2023-06-26 19:11:41', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4695, '2023-06-26 19:11:41', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4696, '2023-06-26 19:11:46', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4697, '2023-06-26 19:11:46', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4698, '2023-06-26 19:11:58', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4699, '2023-06-26 19:11:58', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4700, '2023-06-26 19:13:14', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 5, NULL);
INSERT INTO `sys_log` VALUES (4701, '2023-06-26 19:13:24', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4702, '2023-06-26 19:13:25', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4703, '2023-06-26 19:13:30', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4704, '2023-06-26 19:13:30', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4705, '2023-06-26 19:13:30', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4706, '2023-06-26 19:13:31', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4707, '2023-06-26 19:13:31', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4708, '2023-06-26 19:15:36', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 0, NULL);
INSERT INTO `sys_log` VALUES (4709, '2023-06-26 19:15:36', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4710, '2023-06-26 19:15:36', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4711, '2023-06-26 19:15:38', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4712, '2023-06-26 19:15:38', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4713, '2023-06-26 19:15:57', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4714, '2023-06-26 19:15:57', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4715, '2023-06-26 19:16:27', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4716, '2023-06-26 19:16:27', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4717, '2023-06-26 19:17:02', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4718, '2023-06-26 19:17:02', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4719, '2023-06-26 19:17:02', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4720, '2023-06-26 19:19:07', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 0, NULL);
INSERT INTO `sys_log` VALUES (4721, '2023-06-26 19:19:07', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4722, '2023-06-26 19:19:07', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4723, '2023-06-26 19:19:13', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4724, '2023-06-26 19:19:13', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4725, '2023-06-26 19:19:20', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.getArticleAndAddViews()', '文章', NULL, '根据id获取文章，添加阅读数', NULL, 5, NULL);
INSERT INTO `sys_log` VALUES (4726, '2023-06-26 19:19:20', '0:0:0:0:0:0:0:1', 'com.fish.controller.CommentController.listCommentsByArticle()', '评论', NULL, '根据文章获取评论', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4727, '2023-06-26 19:19:25', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4728, '2023-06-26 19:19:25', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4729, '2023-06-26 19:19:27', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4730, '2023-06-26 19:19:27', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4731, '2023-06-26 19:21:20', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 0, NULL);
INSERT INTO `sys_log` VALUES (4732, '2023-06-26 19:21:20', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4733, '2023-06-26 19:21:20', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4734, '2023-06-26 19:23:07', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4735, '2023-06-26 19:23:18', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4736, '2023-06-26 19:23:18', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4737, '2023-06-26 19:23:18', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 5, NULL);
INSERT INTO `sys_log` VALUES (4738, '2023-06-26 19:23:30', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 0, NULL);
INSERT INTO `sys_log` VALUES (4739, '2023-06-26 19:23:30', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4740, '2023-06-26 19:23:30', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4741, '2023-06-26 19:23:31', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4742, '2023-06-26 19:23:31', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4743, '2023-06-26 19:24:13', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4744, '2023-06-26 19:24:13', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4745, '2023-06-26 19:24:13', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4746, '2023-06-26 19:24:14', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4747, '2023-06-26 19:24:14', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4748, '2023-06-26 19:24:26', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4749, '2023-06-26 19:24:26', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 0, NULL);
INSERT INTO `sys_log` VALUES (4750, '2023-06-26 19:24:26', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4751, '2023-06-26 19:24:27', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4752, '2023-06-26 19:24:27', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4753, '2023-06-26 19:32:10', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4754, '2023-06-26 19:32:10', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4755, '2023-06-26 19:32:10', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4756, '2023-06-26 19:34:26', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4757, '2023-06-26 19:34:26', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4758, '2023-06-26 19:34:26', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4759, '2023-06-26 19:36:17', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4760, '2023-06-26 19:36:17', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4761, '2023-06-26 19:36:17', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (4762, '2023-06-26 19:37:51', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4763, '2023-06-26 19:37:51', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4764, '2023-06-26 19:37:51', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4765, '2023-06-26 19:40:49', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4766, '2023-06-26 19:42:07', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4767, '2023-06-26 19:42:07', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4768, '2023-06-26 19:42:07', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4769, '2023-06-26 19:42:10', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4770, '2023-06-26 19:42:42', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4771, '2023-06-26 19:42:42', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4772, '2023-06-26 19:42:47', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4773, '2023-06-26 19:42:47', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4774, '2023-06-26 19:42:47', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (4775, '2023-06-26 19:42:47', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (4776, '2023-06-26 19:42:47', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 9, NULL);
INSERT INTO `sys_log` VALUES (4777, '2023-06-26 19:42:48', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4778, '2023-06-26 19:42:48', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4779, '2023-06-26 19:42:50', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4780, '2023-06-26 19:42:50', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4781, '2023-06-26 19:42:52', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4782, '2023-06-26 19:42:52', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4783, '2023-06-26 19:42:54', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4784, '2023-06-26 19:42:54', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4785, '2023-06-26 19:49:03', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 5, NULL);
INSERT INTO `sys_log` VALUES (4786, '2023-06-26 19:49:03', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 7, NULL);
INSERT INTO `sys_log` VALUES (4787, '2023-06-26 19:49:04', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4788, '2023-06-26 19:49:04', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4789, '2023-06-26 19:49:08', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4790, '2023-06-26 19:49:08', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4791, '2023-06-26 19:49:08', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4792, '2023-06-26 19:49:08', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4793, '2023-06-26 19:49:08', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4794, '2023-06-26 19:49:09', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4795, '2023-06-26 19:49:09', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4796, '2023-06-26 19:49:11', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.getCategoryDetail()', '文章分类', NULL, '根据id获取详细文章分类，文章数', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4797, '2023-06-26 19:49:11', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4798, '2023-06-26 19:49:14', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4799, '2023-06-26 19:49:14', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4800, '2023-06-26 19:49:15', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4801, '2023-06-26 19:49:15', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 0, NULL);
INSERT INTO `sys_log` VALUES (4802, '2023-06-26 19:49:16', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4803, '2023-06-26 19:49:16', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4804, '2023-06-26 19:49:50', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4805, '2023-06-26 19:49:50', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4806, '2023-06-26 19:52:07', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.login()', '登录', NULL, '登录', NULL, 12, NULL);
INSERT INTO `sys_log` VALUES (4807, '2023-06-26 19:52:10', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.listUsers()', '用户', NULL, '获取所有用户', NULL, 5, NULL);
INSERT INTO `sys_log` VALUES (4808, '2023-06-26 19:52:12', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4809, '2023-06-26 19:52:12', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (4810, '2023-06-26 19:52:13', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4811, '2023-06-26 19:52:17', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4812, '2023-06-26 19:53:02', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.saveTag()', '标签', NULL, '添加标签', NULL, 7, NULL);
INSERT INTO `sys_log` VALUES (4813, '2023-06-26 19:53:02', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4814, '2023-06-26 19:53:05', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.deleteTagById()', '标签', NULL, '删除标签', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (4815, '2023-06-26 19:53:05', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4816, '2023-06-26 19:53:19', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.getTagDetail()', '标签', NULL, '根据id获取详细标签，文章数', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4817, '2023-06-26 19:53:19', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 8, NULL);
INSERT INTO `sys_log` VALUES (4818, '2023-06-26 19:53:25', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4819, '2023-06-26 19:53:25', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4820, '2023-06-26 19:53:25', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (4821, '2023-06-26 19:53:25', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (4822, '2023-06-26 19:53:25', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 9, NULL);
INSERT INTO `sys_log` VALUES (4823, '2023-06-26 19:54:41', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4824, '2023-06-26 19:54:41', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4825, '2023-06-26 19:54:41', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 8, NULL);
INSERT INTO `sys_log` VALUES (4826, '2023-06-26 19:54:41', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 9, NULL);
INSERT INTO `sys_log` VALUES (4827, '2023-06-26 19:54:41', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 11, NULL);
INSERT INTO `sys_log` VALUES (4828, '2023-06-26 19:54:41', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 12, NULL);
INSERT INTO `sys_log` VALUES (4829, '2023-06-26 19:54:43', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.getArticleAndAddViews()', '文章', NULL, '根据id获取文章，添加阅读数', NULL, 7, NULL);
INSERT INTO `sys_log` VALUES (4830, '2023-06-26 19:54:43', '0:0:0:0:0:0:0:1', 'com.fish.controller.CommentController.listCommentsByArticle()', '评论', NULL, '根据文章获取评论', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4831, '2023-06-26 19:54:44', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4832, '2023-06-26 19:54:44', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4833, '2023-06-26 19:54:46', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.getTagDetail()', '标签', NULL, '根据id获取详细标签，文章数', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4834, '2023-06-26 19:54:46', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4835, '2023-06-26 19:54:48', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.getArticleAndAddViews()', '文章', NULL, '根据id获取文章，添加阅读数', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4836, '2023-06-26 19:54:48', '0:0:0:0:0:0:0:1', 'com.fish.controller.CommentController.listCommentsByArticle()', '评论', NULL, '根据文章获取评论', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4837, '2023-06-26 19:54:58', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.login()', '登录', NULL, '登录', NULL, 5, NULL);
INSERT INTO `sys_log` VALUES (4838, '2023-06-26 19:54:58', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 0, NULL);
INSERT INTO `sys_log` VALUES (4839, '2023-06-26 19:54:58', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.getArticleAndAddViews()', '文章', NULL, '根据id获取文章，添加阅读数', NULL, 5, NULL);
INSERT INTO `sys_log` VALUES (4840, '2023-06-26 19:54:58', '0:0:0:0:0:0:0:1', 'com.fish.controller.CommentController.listCommentsByArticle()', '评论', NULL, '根据文章获取评论', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4841, '2023-06-26 19:55:01', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.getArticleById()', '文章', NULL, '根据id获取文章', NULL, 0, NULL);
INSERT INTO `sys_log` VALUES (4842, '2023-06-26 19:55:01', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4843, '2023-06-26 19:55:01', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorys()', '文章分类', NULL, '获取所有文章分类', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4844, '2023-06-26 19:55:06', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.saveArticle()', '文章', NULL, '发布文章', NULL, 10, NULL);
INSERT INTO `sys_log` VALUES (4845, '2023-06-26 19:55:06', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.getArticleAndAddViews()', '文章', NULL, '根据id获取文章，添加阅读数', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4846, '2023-06-26 19:55:06', '0:0:0:0:0:0:0:1', 'com.fish.controller.CommentController.listCommentsByArticle()', '评论', NULL, '根据文章获取评论', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4847, '2023-06-26 19:55:08', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4848, '2023-06-26 19:55:08', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4849, '2023-06-26 19:55:11', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.deleteTagById()', '标签', NULL, '删除标签', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4850, '2023-06-26 19:55:11', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4851, '2023-06-26 19:55:22', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.listUsers()', '用户', NULL, '获取所有用户', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4852, '2023-06-26 19:55:24', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4853, '2023-06-26 19:55:24', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4854, '2023-06-26 19:55:26', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4855, '2023-06-26 19:56:29', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (4856, '2023-06-26 19:56:29', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (4857, '2023-06-26 19:56:29', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4858, '2023-06-26 19:56:29', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4859, '2023-06-26 19:56:31', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4860, '2023-06-26 19:56:31', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4861, '2023-06-26 19:56:31', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 10, NULL);
INSERT INTO `sys_log` VALUES (4862, '2023-06-26 19:56:31', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 13, NULL);
INSERT INTO `sys_log` VALUES (4863, '2023-06-26 19:56:31', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 13, NULL);
INSERT INTO `sys_log` VALUES (4864, '2023-06-26 19:56:32', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4865, '2023-06-26 19:56:32', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4866, '2023-06-26 19:56:37', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4867, '2023-06-26 19:56:37', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4868, '2023-06-26 19:56:38', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 0, NULL);
INSERT INTO `sys_log` VALUES (4869, '2023-06-26 19:56:38', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4870, '2023-06-26 19:56:57', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4871, '2023-06-26 19:56:57', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4872, '2023-06-26 19:57:00', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4873, '2023-06-26 19:57:00', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4874, '2023-06-26 19:57:12', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4875, '2023-06-26 19:57:12', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4876, '2023-06-26 19:57:12', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4877, '2023-06-26 19:57:12', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4878, '2023-06-26 19:57:12', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 5, NULL);
INSERT INTO `sys_log` VALUES (4879, '2023-06-26 19:57:13', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4880, '2023-06-26 19:57:13', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 0, NULL);
INSERT INTO `sys_log` VALUES (4881, '2023-06-26 20:28:57', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 10, NULL);
INSERT INTO `sys_log` VALUES (4882, '2023-06-26 20:28:57', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 54, NULL);
INSERT INTO `sys_log` VALUES (4883, '2023-06-26 20:28:57', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 55, NULL);
INSERT INTO `sys_log` VALUES (4884, '2023-06-26 20:28:57', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 72, NULL);
INSERT INTO `sys_log` VALUES (4885, '2023-06-26 20:28:57', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 75, NULL);
INSERT INTO `sys_log` VALUES (4886, '2023-06-26 20:28:57', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 101, NULL);
INSERT INTO `sys_log` VALUES (4887, '2023-06-26 20:28:59', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4888, '2023-06-26 20:28:59', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 9, NULL);
INSERT INTO `sys_log` VALUES (4889, '2023-06-26 20:29:03', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4890, '2023-06-26 20:29:03', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4891, '2023-06-26 20:29:06', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4892, '2023-06-26 20:29:06', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4893, '2023-06-26 20:29:08', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4894, '2023-06-26 20:29:08', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4895, '2023-06-26 20:29:08', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4896, '2023-06-26 20:29:08', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 5, NULL);
INSERT INTO `sys_log` VALUES (4897, '2023-06-26 20:29:08', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 5, NULL);
INSERT INTO `sys_log` VALUES (4898, '2023-06-26 20:29:52', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4899, '2023-06-26 20:29:52', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4900, '2023-06-26 20:29:55', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4901, '2023-06-26 20:29:55', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4902, '2023-06-26 20:29:56', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4903, '2023-06-26 20:29:56', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4904, '2023-06-26 20:31:30', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 13, NULL);
INSERT INTO `sys_log` VALUES (4905, '2023-06-26 20:31:30', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 16, NULL);
INSERT INTO `sys_log` VALUES (4906, '2023-06-26 20:31:30', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 16, NULL);
INSERT INTO `sys_log` VALUES (4907, '2023-06-26 20:31:30', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 18, NULL);
INSERT INTO `sys_log` VALUES (4908, '2023-06-26 20:31:30', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 21, NULL);
INSERT INTO `sys_log` VALUES (4909, '2023-06-26 20:31:31', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4910, '2023-06-26 20:31:31', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4911, '2023-06-26 20:31:32', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4912, '2023-06-26 20:31:32', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4913, '2023-06-26 20:31:32', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4914, '2023-06-26 20:31:32', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4915, '2023-06-26 20:31:32', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4916, '2023-06-26 20:31:33', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4917, '2023-06-26 20:31:33', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4918, '2023-06-26 20:31:34', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4919, '2023-06-26 20:31:34', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4920, '2023-06-26 20:31:37', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4921, '2023-06-26 20:31:37', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4922, '2023-06-26 20:31:38', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4923, '2023-06-26 20:31:38', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4924, '2023-06-26 20:31:40', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4925, '2023-06-26 20:31:40', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4926, '2023-06-26 20:31:40', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4927, '2023-06-26 20:31:40', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4928, '2023-06-26 20:31:40', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4929, '2023-06-26 20:31:42', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4930, '2023-06-26 20:31:42', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4931, '2023-06-26 20:31:47', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4932, '2023-06-26 20:31:47', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4933, '2023-06-26 20:31:49', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4934, '2023-06-26 20:31:49', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4935, '2023-06-26 20:31:52', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4936, '2023-06-26 20:31:52', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4937, '2023-06-26 20:31:52', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4938, '2023-06-26 20:31:52', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4939, '2023-06-26 20:31:52', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4940, '2023-06-26 20:31:52', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4941, '2023-06-26 20:31:52', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4942, '2023-06-26 20:31:54', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4943, '2023-06-26 20:31:54', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4944, '2023-06-26 20:31:56', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4945, '2023-06-26 20:31:56', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4946, '2023-06-26 20:31:56', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4947, '2023-06-26 20:31:56', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4948, '2023-06-26 20:31:56', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4949, '2023-06-26 20:31:58', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.getArticleAndAddViews()', '文章', NULL, '根据id获取文章，添加阅读数', NULL, 32, NULL);
INSERT INTO `sys_log` VALUES (4950, '2023-06-26 20:31:58', '0:0:0:0:0:0:0:1', 'com.fish.controller.CommentController.listCommentsByArticle()', '评论', NULL, '根据文章获取评论', NULL, 22, NULL);
INSERT INTO `sys_log` VALUES (4951, '2023-06-27 18:21:23', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 140, NULL);
INSERT INTO `sys_log` VALUES (4952, '2023-06-27 18:21:23', '127.0.0.1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 140, NULL);
INSERT INTO `sys_log` VALUES (4953, '2023-06-27 18:21:23', '127.0.0.1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 126, NULL);
INSERT INTO `sys_log` VALUES (4954, '2023-06-27 18:21:23', '127.0.0.1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 130, NULL);
INSERT INTO `sys_log` VALUES (4955, '2023-06-27 18:21:23', '127.0.0.1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 128, NULL);
INSERT INTO `sys_log` VALUES (4956, '2023-06-27 18:21:25', '127.0.0.1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4957, '2023-06-27 18:21:25', '127.0.0.1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4958, '2023-06-27 18:21:26', '127.0.0.1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4959, '2023-06-27 18:21:26', '127.0.0.1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 10, NULL);
INSERT INTO `sys_log` VALUES (4960, '2023-06-27 18:21:31', '127.0.0.1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4961, '2023-06-27 18:21:31', '127.0.0.1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4962, '2023-06-27 18:21:34', '127.0.0.1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4963, '2023-06-27 18:21:34', '127.0.0.1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (4964, '2023-06-27 18:21:35', '127.0.0.1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4965, '2023-06-27 18:21:35', '127.0.0.1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4966, '2023-06-27 18:21:36', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4967, '2023-06-27 18:21:36', '127.0.0.1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4968, '2023-06-27 18:21:36', '127.0.0.1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (4969, '2023-06-27 18:21:36', '127.0.0.1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (4970, '2023-06-27 18:21:36', '127.0.0.1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (4971, '2023-06-27 18:21:39', '127.0.0.1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4972, '2023-06-27 18:21:39', '127.0.0.1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4973, '2023-06-27 18:24:21', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 13, NULL);
INSERT INTO `sys_log` VALUES (4974, '2023-06-27 18:24:21', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 15, NULL);
INSERT INTO `sys_log` VALUES (4975, '2023-06-27 18:24:21', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 14, NULL);
INSERT INTO `sys_log` VALUES (4976, '2023-06-27 18:24:21', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 16, NULL);
INSERT INTO `sys_log` VALUES (4977, '2023-06-27 18:24:21', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 19, NULL);
INSERT INTO `sys_log` VALUES (4978, '2023-06-27 18:24:30', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4979, '2023-06-27 18:24:30', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4980, '2023-06-27 18:24:30', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4981, '2023-06-27 18:24:30', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4982, '2023-06-27 18:24:30', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4983, '2023-06-27 18:25:46', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 12, NULL);
INSERT INTO `sys_log` VALUES (4984, '2023-06-27 18:25:46', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 12, NULL);
INSERT INTO `sys_log` VALUES (4985, '2023-06-27 18:25:46', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 14, NULL);
INSERT INTO `sys_log` VALUES (4986, '2023-06-27 18:25:46', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 20, NULL);
INSERT INTO `sys_log` VALUES (4987, '2023-06-27 18:25:46', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 21, NULL);
INSERT INTO `sys_log` VALUES (4988, '2023-06-27 18:25:53', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4989, '2023-06-27 18:25:53', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4990, '2023-06-27 18:25:55', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4991, '2023-06-27 18:25:55', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4992, '2023-06-27 18:25:58', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4993, '2023-06-27 18:25:58', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4994, '2023-06-27 18:26:01', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (4995, '2023-06-27 18:26:01', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4996, '2023-06-27 18:26:02', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4997, '2023-06-27 18:26:02', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (4998, '2023-06-27 18:26:02', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (4999, '2023-06-27 18:26:02', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (5000, '2023-06-27 18:26:02', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (5001, '2023-06-27 18:26:02', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (5002, '2023-06-27 18:26:03', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (5003, '2023-06-27 18:26:25', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.getArticleAndAddViews()', '文章', NULL, '根据id获取文章，添加阅读数', NULL, 37, NULL);
INSERT INTO `sys_log` VALUES (5004, '2023-06-27 18:26:25', '0:0:0:0:0:0:0:1', 'com.fish.controller.CommentController.listCommentsByArticle()', '评论', NULL, '根据文章获取评论', NULL, 21, NULL);
INSERT INTO `sys_log` VALUES (5005, '2023-06-27 18:26:34', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.getArticleAndAddViews()', '文章', NULL, '根据id获取文章，添加阅读数', NULL, 7, NULL);
INSERT INTO `sys_log` VALUES (5006, '2023-06-27 18:26:34', '0:0:0:0:0:0:0:1', 'com.fish.controller.CommentController.listCommentsByArticle()', '评论', NULL, '根据文章获取评论', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (5007, '2023-06-27 18:27:08', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.login()', '登录', NULL, '登录', NULL, 71, NULL);
INSERT INTO `sys_log` VALUES (5008, '2023-06-27 18:27:08', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (5009, '2023-06-27 18:27:08', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.getArticleAndAddViews()', '文章', NULL, '根据id获取文章，添加阅读数', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (5010, '2023-06-27 18:27:08', '0:0:0:0:0:0:0:1', 'com.fish.controller.CommentController.listCommentsByArticle()', '评论', NULL, '根据文章获取评论', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (5011, '2023-06-27 18:27:32', '0:0:0:0:0:0:0:1', 'com.fish.controller.CommentController.saveCommentAndChangeCounts()', '评论', NULL, '添加评论，增加评论数', NULL, 14, NULL);
INSERT INTO `sys_log` VALUES (5012, '2023-06-27 18:27:39', '0:0:0:0:0:0:0:1', 'com.fish.controller.CommentController.saveCommentAndChangeCounts()', '评论', NULL, '添加评论，增加评论数', NULL, 10, NULL);
INSERT INTO `sys_log` VALUES (5013, '2023-06-27 18:27:53', '0:0:0:0:0:0:0:1', 'com.fish.controller.CommentController.saveCommentAndChangeCounts()', '评论', NULL, '添加评论，增加评论数', NULL, 8, NULL);
INSERT INTO `sys_log` VALUES (5014, '2023-06-27 18:27:57', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (5015, '2023-06-27 18:27:57', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (5016, '2023-06-27 18:27:58', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (5017, '2023-06-27 18:27:59', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (5018, '2023-06-27 18:27:59', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (5019, '2023-06-27 18:28:00', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (5020, '2023-06-27 18:28:01', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (5021, '2023-06-27 18:28:01', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (5022, '2023-06-27 18:28:03', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (5023, '2023-06-27 18:28:03', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (5024, '2023-06-27 18:28:03', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 5, NULL);
INSERT INTO `sys_log` VALUES (5025, '2023-06-27 18:28:03', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 8, NULL);
INSERT INTO `sys_log` VALUES (5026, '2023-06-27 18:28:03', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 10, NULL);
INSERT INTO `sys_log` VALUES (5027, '2023-06-27 18:28:04', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (5028, '2023-06-27 18:28:04', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (5029, '2023-06-27 18:28:18', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listCategorysDetail()', '标签', NULL, '获取所有标签，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (5030, '2023-06-27 18:28:18', '0:0:0:0:0:0:0:1', 'com.fish.controller.CategoryController.listCategorysDetail()', '文章分类', NULL, '获取所有文章分类，详细', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (5031, '2023-06-27 18:28:20', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (5032, '2023-06-27 18:28:20', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (5033, '2023-06-27 18:29:22', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.login()', '登录', NULL, '登录', NULL, 12, NULL);
INSERT INTO `sys_log` VALUES (5034, '2023-06-27 18:29:26', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.listUsers()', '用户', NULL, '获取所有用户', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (5035, '2023-06-27 18:29:28', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 5, NULL);
INSERT INTO `sys_log` VALUES (5036, '2023-06-27 18:29:28', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 6, NULL);
INSERT INTO `sys_log` VALUES (5037, '2023-06-27 18:30:36', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 5, NULL);
INSERT INTO `sys_log` VALUES (5038, '2023-06-27 18:30:39', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (5039, '2023-06-27 18:30:39', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 5, NULL);
INSERT INTO `sys_log` VALUES (5040, '2023-06-27 18:30:41', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.listUsers()', '用户', NULL, '获取所有用户', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (5041, '2023-06-27 18:30:54', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.updateUser()', '用户', NULL, '修改用户', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (5042, '2023-06-27 18:31:00', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.updateUser()', '用户', NULL, '修改用户', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (5043, '2023-06-27 18:31:19', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.updateUser()', '用户', NULL, '修改用户', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (5044, '2023-06-27 18:31:50', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.listUsers()', '用户', NULL, '获取所有用户', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (5045, '2023-06-27 18:31:56', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (5046, '2023-06-27 18:31:56', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 5, NULL);
INSERT INTO `sys_log` VALUES (5047, '2023-06-27 18:32:00', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listTags()', '标签', NULL, '获取所有标签', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (5048, '2023-06-27 18:32:24', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.listUsers()', '用户', NULL, '获取所有用户', NULL, 3, NULL);
INSERT INTO `sys_log` VALUES (5049, '2023-06-27 18:37:53', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.updateUser()', '用户', NULL, '修改用户', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (5050, '2023-06-27 18:52:45', '0:0:0:0:0:0:0:1', 'com.fish.controller.LoginController.login()', '登录', NULL, '登录', NULL, 198, NULL);
INSERT INTO `sys_log` VALUES (5051, '2023-06-27 18:52:49', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.listUsers()', '用户', NULL, '获取所有用户', NULL, 11, NULL);
INSERT INTO `sys_log` VALUES (5052, '2023-06-27 18:53:34', '0:0:0:0:0:0:0:1', 'com.fish.controller.UserController.getCurrentUser()', '用户', NULL, '获取当前登录用户', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (5053, '2023-06-27 18:53:34', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 33, NULL);
INSERT INTO `sys_log` VALUES (5054, '2023-06-27 18:53:34', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 32, NULL);
INSERT INTO `sys_log` VALUES (5055, '2023-06-27 18:53:34', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 23, NULL);
INSERT INTO `sys_log` VALUES (5056, '2023-06-27 18:53:34', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 44, NULL);
INSERT INTO `sys_log` VALUES (5057, '2023-06-27 18:53:34', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 52, NULL);
INSERT INTO `sys_log` VALUES (5058, '2023-06-27 18:53:38', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (5059, '2023-06-27 18:53:38', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (5060, '2023-06-27 18:53:40', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.getArticleAndAddViews()', '文章', NULL, '根据id获取文章，添加阅读数', NULL, 32, NULL);
INSERT INTO `sys_log` VALUES (5061, '2023-06-27 18:53:40', '0:0:0:0:0:0:0:1', 'com.fish.controller.CommentController.listCommentsByArticle()', '评论', NULL, '根据文章获取评论', NULL, 12, NULL);
INSERT INTO `sys_log` VALUES (5062, '2023-06-27 18:53:45', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (5063, '2023-06-27 18:53:45', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (5064, '2023-06-27 18:53:45', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (5065, '2023-06-27 18:53:45', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 4, NULL);
INSERT INTO `sys_log` VALUES (5066, '2023-06-27 18:53:45', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 5, NULL);
INSERT INTO `sys_log` VALUES (5067, '2023-06-27 18:53:46', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 2, NULL);
INSERT INTO `sys_log` VALUES (5068, '2023-06-27 18:53:46', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 1, NULL);
INSERT INTO `sys_log` VALUES (5069, '2023-06-27 18:55:05', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listHotArticles()', '文章', NULL, '获取最热文章', NULL, 14, NULL);
INSERT INTO `sys_log` VALUES (5070, '2023-06-27 18:55:05', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArchives()', '文章', NULL, '获取文章归档日期', NULL, 13, NULL);
INSERT INTO `sys_log` VALUES (5071, '2023-06-27 18:55:05', '0:0:0:0:0:0:0:1', 'com.fish.controller.TagController.listHotTags()', '标签', NULL, '获取最热标签', NULL, 17, NULL);
INSERT INTO `sys_log` VALUES (5072, '2023-06-27 18:55:05', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listNewArticles()', '文章', NULL, '获取最新文章', NULL, 21, NULL);
INSERT INTO `sys_log` VALUES (5073, '2023-06-27 18:55:05', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.listArticles()', '文章', NULL, '获取所有文章', NULL, 18, NULL);
INSERT INTO `sys_log` VALUES (5074, '2023-06-27 18:55:08', '0:0:0:0:0:0:0:1', 'com.fish.controller.ArticleController.getArticleAndAddViews()', '文章', NULL, '根据id获取文章，添加阅读数', NULL, 8, NULL);
INSERT INTO `sys_log` VALUES (5075, '2023-06-27 18:55:08', '0:0:0:0:0:0:0:1', 'com.fish.controller.CommentController.listCommentsByArticle()', '评论', NULL, '根据文章获取评论', NULL, 3, NULL);

-- ----------------------------
-- Table structure for sys_user
-- ----------------------------
DROP TABLE IF EXISTS `sys_user`;
CREATE TABLE `sys_user`  (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `account` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `admin` bit(1) NULL DEFAULT NULL,
  `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `create_date` datetime NULL DEFAULT NULL,
  `deleted` bit(1) NULL DEFAULT NULL,
  `email` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `last_login` datetime NULL DEFAULT NULL,
  `mobile_phone_number` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `nickname` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `password` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `salt` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `status` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `UK_awpog86ljqwb89aqa1c5gvdrd`(`account` ASC) USING BTREE,
  UNIQUE INDEX `UK_ahtq5ew3v0kt1n7hf1sgp7p8l`(`email` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 18 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_user
-- ----------------------------
INSERT INTO `sys_user` VALUES (1, 'iFishing', b'0', '/static/user/user_2.png', NULL, b'0', 'yoo725@hotmail.com', NULL, '17781879365', 'fishin', 'd7d3b794125fc60b4f92a6c112d74e7b', 'fdf4aa19a9cacd3a29a6e447b394af94', 'normal');
INSERT INTO `sys_user` VALUES (2, 'admin', b'1', '/static/user/admin.png', NULL, b'0', NULL, NULL, NULL, '超管儿', 'ca7befde625d3d7c93978af279d8f88c', 'dead857a210672983d428af373208a15', 'normal');

SET FOREIGN_KEY_CHECKS = 1;
